/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * Summary of log status
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-08T09:36:05.709243Z[Etc/UTC]", comments = "Generator version: 7.7.0")
public class LogStatusSummary {
  public static final String SERIALIZED_NAME_RECIPIENTS = "Recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private Long recipients;

  public static final String SERIALIZED_NAME_EMAIL_TOTAL = "EmailTotal";
  @SerializedName(SERIALIZED_NAME_EMAIL_TOTAL)
  private Long emailTotal;

  public static final String SERIALIZED_NAME_SMS_TOTAL = "SmsTotal";
  @SerializedName(SERIALIZED_NAME_SMS_TOTAL)
  private Long smsTotal;

  public static final String SERIALIZED_NAME_DELIVERED = "Delivered";
  @SerializedName(SERIALIZED_NAME_DELIVERED)
  private Long delivered;

  public static final String SERIALIZED_NAME_BOUNCED = "Bounced";
  @SerializedName(SERIALIZED_NAME_BOUNCED)
  private Long bounced;

  public static final String SERIALIZED_NAME_IN_PROGRESS = "InProgress";
  @SerializedName(SERIALIZED_NAME_IN_PROGRESS)
  private Long inProgress;

  public static final String SERIALIZED_NAME_OPENED = "Opened";
  @SerializedName(SERIALIZED_NAME_OPENED)
  private Long opened;

  public static final String SERIALIZED_NAME_CLICKED = "Clicked";
  @SerializedName(SERIALIZED_NAME_CLICKED)
  private Long clicked;

  public static final String SERIALIZED_NAME_UNSUBSCRIBED = "Unsubscribed";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED)
  private Long unsubscribed;

  public static final String SERIALIZED_NAME_COMPLAINTS = "Complaints";
  @SerializedName(SERIALIZED_NAME_COMPLAINTS)
  private Long complaints;

  public static final String SERIALIZED_NAME_INBOUND = "Inbound";
  @SerializedName(SERIALIZED_NAME_INBOUND)
  private Long inbound;

  public static final String SERIALIZED_NAME_MANUAL_CANCEL = "ManualCancel";
  @SerializedName(SERIALIZED_NAME_MANUAL_CANCEL)
  private Long manualCancel;

  public static final String SERIALIZED_NAME_NOT_DELIVERED = "NotDelivered";
  @SerializedName(SERIALIZED_NAME_NOT_DELIVERED)
  private Long notDelivered;

  public LogStatusSummary() {
  }

  public LogStatusSummary recipients(Long recipients) {
    this.recipients = recipients;
    return this;
  }

  /**
   * Number of recipients
   * @return recipients
   */
  @javax.annotation.Nullable
  public Long getRecipients() {
    return recipients;
  }

  public void setRecipients(Long recipients) {
    this.recipients = recipients;
  }


  public LogStatusSummary emailTotal(Long emailTotal) {
    this.emailTotal = emailTotal;
    return this;
  }

  /**
   * Number of emails
   * @return emailTotal
   */
  @javax.annotation.Nullable
  public Long getEmailTotal() {
    return emailTotal;
  }

  public void setEmailTotal(Long emailTotal) {
    this.emailTotal = emailTotal;
  }


  public LogStatusSummary smsTotal(Long smsTotal) {
    this.smsTotal = smsTotal;
    return this;
  }

  /**
   * Number of SMS
   * @return smsTotal
   */
  @javax.annotation.Nullable
  public Long getSmsTotal() {
    return smsTotal;
  }

  public void setSmsTotal(Long smsTotal) {
    this.smsTotal = smsTotal;
  }


  public LogStatusSummary delivered(Long delivered) {
    this.delivered = delivered;
    return this;
  }

  /**
   * Number of delivered messages
   * @return delivered
   */
  @javax.annotation.Nullable
  public Long getDelivered() {
    return delivered;
  }

  public void setDelivered(Long delivered) {
    this.delivered = delivered;
  }


  public LogStatusSummary bounced(Long bounced) {
    this.bounced = bounced;
    return this;
  }

  /**
   * Number of bounced messages
   * @return bounced
   */
  @javax.annotation.Nullable
  public Long getBounced() {
    return bounced;
  }

  public void setBounced(Long bounced) {
    this.bounced = bounced;
  }


  public LogStatusSummary inProgress(Long inProgress) {
    this.inProgress = inProgress;
    return this;
  }

  /**
   * Number of messages in progress
   * @return inProgress
   */
  @javax.annotation.Nullable
  public Long getInProgress() {
    return inProgress;
  }

  public void setInProgress(Long inProgress) {
    this.inProgress = inProgress;
  }


  public LogStatusSummary opened(Long opened) {
    this.opened = opened;
    return this;
  }

  /**
   * Number of opened messages
   * @return opened
   */
  @javax.annotation.Nullable
  public Long getOpened() {
    return opened;
  }

  public void setOpened(Long opened) {
    this.opened = opened;
  }


  public LogStatusSummary clicked(Long clicked) {
    this.clicked = clicked;
    return this;
  }

  /**
   * Number of clicked messages
   * @return clicked
   */
  @javax.annotation.Nullable
  public Long getClicked() {
    return clicked;
  }

  public void setClicked(Long clicked) {
    this.clicked = clicked;
  }


  public LogStatusSummary unsubscribed(Long unsubscribed) {
    this.unsubscribed = unsubscribed;
    return this;
  }

  /**
   * Number of unsubscribed messages
   * @return unsubscribed
   */
  @javax.annotation.Nullable
  public Long getUnsubscribed() {
    return unsubscribed;
  }

  public void setUnsubscribed(Long unsubscribed) {
    this.unsubscribed = unsubscribed;
  }


  public LogStatusSummary complaints(Long complaints) {
    this.complaints = complaints;
    return this;
  }

  /**
   * Number of complaint messages
   * @return complaints
   */
  @javax.annotation.Nullable
  public Long getComplaints() {
    return complaints;
  }

  public void setComplaints(Long complaints) {
    this.complaints = complaints;
  }


  public LogStatusSummary inbound(Long inbound) {
    this.inbound = inbound;
    return this;
  }

  /**
   * Number of inbound messages
   * @return inbound
   */
  @javax.annotation.Nullable
  public Long getInbound() {
    return inbound;
  }

  public void setInbound(Long inbound) {
    this.inbound = inbound;
  }


  public LogStatusSummary manualCancel(Long manualCancel) {
    this.manualCancel = manualCancel;
    return this;
  }

  /**
   * Number of manually cancelled messages
   * @return manualCancel
   */
  @javax.annotation.Nullable
  public Long getManualCancel() {
    return manualCancel;
  }

  public void setManualCancel(Long manualCancel) {
    this.manualCancel = manualCancel;
  }


  public LogStatusSummary notDelivered(Long notDelivered) {
    this.notDelivered = notDelivered;
    return this;
  }

  /**
   * Number of messages flagged with &#39;Not Delivered&#39;
   * @return notDelivered
   */
  @javax.annotation.Nullable
  public Long getNotDelivered() {
    return notDelivered;
  }

  public void setNotDelivered(Long notDelivered) {
    this.notDelivered = notDelivered;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LogStatusSummary logStatusSummary = (LogStatusSummary) o;
    return Objects.equals(this.recipients, logStatusSummary.recipients) &&
        Objects.equals(this.emailTotal, logStatusSummary.emailTotal) &&
        Objects.equals(this.smsTotal, logStatusSummary.smsTotal) &&
        Objects.equals(this.delivered, logStatusSummary.delivered) &&
        Objects.equals(this.bounced, logStatusSummary.bounced) &&
        Objects.equals(this.inProgress, logStatusSummary.inProgress) &&
        Objects.equals(this.opened, logStatusSummary.opened) &&
        Objects.equals(this.clicked, logStatusSummary.clicked) &&
        Objects.equals(this.unsubscribed, logStatusSummary.unsubscribed) &&
        Objects.equals(this.complaints, logStatusSummary.complaints) &&
        Objects.equals(this.inbound, logStatusSummary.inbound) &&
        Objects.equals(this.manualCancel, logStatusSummary.manualCancel) &&
        Objects.equals(this.notDelivered, logStatusSummary.notDelivered);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recipients, emailTotal, smsTotal, delivered, bounced, inProgress, opened, clicked, unsubscribed, complaints, inbound, manualCancel, notDelivered);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LogStatusSummary {\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    emailTotal: ").append(toIndentedString(emailTotal)).append("\n");
    sb.append("    smsTotal: ").append(toIndentedString(smsTotal)).append("\n");
    sb.append("    delivered: ").append(toIndentedString(delivered)).append("\n");
    sb.append("    bounced: ").append(toIndentedString(bounced)).append("\n");
    sb.append("    inProgress: ").append(toIndentedString(inProgress)).append("\n");
    sb.append("    opened: ").append(toIndentedString(opened)).append("\n");
    sb.append("    clicked: ").append(toIndentedString(clicked)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    complaints: ").append(toIndentedString(complaints)).append("\n");
    sb.append("    inbound: ").append(toIndentedString(inbound)).append("\n");
    sb.append("    manualCancel: ").append(toIndentedString(manualCancel)).append("\n");
    sb.append("    notDelivered: ").append(toIndentedString(notDelivered)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Recipients");
    openapiFields.add("EmailTotal");
    openapiFields.add("SmsTotal");
    openapiFields.add("Delivered");
    openapiFields.add("Bounced");
    openapiFields.add("InProgress");
    openapiFields.add("Opened");
    openapiFields.add("Clicked");
    openapiFields.add("Unsubscribed");
    openapiFields.add("Complaints");
    openapiFields.add("Inbound");
    openapiFields.add("ManualCancel");
    openapiFields.add("NotDelivered");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LogStatusSummary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LogStatusSummary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LogStatusSummary is not found in the empty JSON string", LogStatusSummary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LogStatusSummary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LogStatusSummary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LogStatusSummary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LogStatusSummary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LogStatusSummary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LogStatusSummary.class));

       return (TypeAdapter<T>) new TypeAdapter<LogStatusSummary>() {
           @Override
           public void write(JsonWriter out, LogStatusSummary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LogStatusSummary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LogStatusSummary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LogStatusSummary
   * @throws IOException if the JSON string is invalid with respect to LogStatusSummary
   */
  public static LogStatusSummary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LogStatusSummary.class);
  }

  /**
   * Convert an instance of LogStatusSummary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

