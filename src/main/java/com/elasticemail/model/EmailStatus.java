/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.elasticemail.model.LogJobStatus;
import com.elasticemail.model.MessageCategoryEnum;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * Status information of the specified email
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T13:34:56.566653Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class EmailStatus {
  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_DATE = "Date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private LogJobStatus status = LogJobStatus.ALL;

  public static final String SERIALIZED_NAME_STATUS_NAME = "StatusName";
  @SerializedName(SERIALIZED_NAME_STATUS_NAME)
  private String statusName;

  public static final String SERIALIZED_NAME_STATUS_CHANGE_DATE = "StatusChangeDate";
  @SerializedName(SERIALIZED_NAME_STATUS_CHANGE_DATE)
  private OffsetDateTime statusChangeDate;

  public static final String SERIALIZED_NAME_DATE_SENT = "DateSent";
  @SerializedName(SERIALIZED_NAME_DATE_SENT)
  private OffsetDateTime dateSent;

  public static final String SERIALIZED_NAME_DATE_OPENED = "DateOpened";
  @SerializedName(SERIALIZED_NAME_DATE_OPENED)
  private OffsetDateTime dateOpened;

  public static final String SERIALIZED_NAME_DATE_CLICKED = "DateClicked";
  @SerializedName(SERIALIZED_NAME_DATE_CLICKED)
  private OffsetDateTime dateClicked;

  public static final String SERIALIZED_NAME_ERROR_MESSAGE = "ErrorMessage";
  @SerializedName(SERIALIZED_NAME_ERROR_MESSAGE)
  private String errorMessage;

  public static final String SERIALIZED_NAME_TRANSACTION_I_D = "TransactionID";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_I_D)
  private String transactionID;

  public static final String SERIALIZED_NAME_ENVELOPE_FROM = "EnvelopeFrom";
  @SerializedName(SERIALIZED_NAME_ENVELOPE_FROM)
  private String envelopeFrom;

  public static final String SERIALIZED_NAME_ERROR_CATEGORY = "ErrorCategory";
  @SerializedName(SERIALIZED_NAME_ERROR_CATEGORY)
  private MessageCategoryEnum errorCategory = MessageCategoryEnum.UNKNOWN;

  public EmailStatus() {
  }

  public EmailStatus from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Email address this email was sent from.
   * @return from
  **/
  @javax.annotation.Nullable
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public EmailStatus to(String to) {
    this.to = to;
    return this;
  }

   /**
   * Email address this email was sent to.
   * @return to
  **/
  @javax.annotation.Nullable
  public String getTo() {
    return to;
  }

  public void setTo(String to) {
    this.to = to;
  }


  public EmailStatus date(OffsetDateTime date) {
    this.date = date;
    return this;
  }

   /**
   * Date the email was submitted.
   * @return date
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDate() {
    return date;
  }

  public void setDate(OffsetDateTime date) {
    this.date = date;
  }


  public EmailStatus status(LogJobStatus status) {
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  public LogJobStatus getStatus() {
    return status;
  }

  public void setStatus(LogJobStatus status) {
    this.status = status;
  }


  public EmailStatus statusName(String statusName) {
    this.statusName = statusName;
    return this;
  }

   /**
   * Name of email&#39;s status
   * @return statusName
  **/
  @javax.annotation.Nullable
  public String getStatusName() {
    return statusName;
  }

  public void setStatusName(String statusName) {
    this.statusName = statusName;
  }


  public EmailStatus statusChangeDate(OffsetDateTime statusChangeDate) {
    this.statusChangeDate = statusChangeDate;
    return this;
  }

   /**
   * Date of last status change.
   * @return statusChangeDate
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getStatusChangeDate() {
    return statusChangeDate;
  }

  public void setStatusChangeDate(OffsetDateTime statusChangeDate) {
    this.statusChangeDate = statusChangeDate;
  }


  public EmailStatus dateSent(OffsetDateTime dateSent) {
    this.dateSent = dateSent;
    return this;
  }

   /**
   * Date when the email was sent
   * @return dateSent
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateSent() {
    return dateSent;
  }

  public void setDateSent(OffsetDateTime dateSent) {
    this.dateSent = dateSent;
  }


  public EmailStatus dateOpened(OffsetDateTime dateOpened) {
    this.dateOpened = dateOpened;
    return this;
  }

   /**
   * Date when the email changed the status to &#39;opened&#39;
   * @return dateOpened
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateOpened() {
    return dateOpened;
  }

  public void setDateOpened(OffsetDateTime dateOpened) {
    this.dateOpened = dateOpened;
  }


  public EmailStatus dateClicked(OffsetDateTime dateClicked) {
    this.dateClicked = dateClicked;
    return this;
  }

   /**
   * Date when the email changed the status to &#39;clicked&#39;
   * @return dateClicked
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateClicked() {
    return dateClicked;
  }

  public void setDateClicked(OffsetDateTime dateClicked) {
    this.dateClicked = dateClicked;
  }


  public EmailStatus errorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
    return this;
  }

   /**
   * Detailed error or bounced message.
   * @return errorMessage
  **/
  @javax.annotation.Nullable
  public String getErrorMessage() {
    return errorMessage;
  }

  public void setErrorMessage(String errorMessage) {
    this.errorMessage = errorMessage;
  }


  public EmailStatus transactionID(String transactionID) {
    this.transactionID = transactionID;
    return this;
  }

   /**
   * ID number of transaction
   * @return transactionID
  **/
  @javax.annotation.Nullable
  public String getTransactionID() {
    return transactionID;
  }

  public void setTransactionID(String transactionID) {
    this.transactionID = transactionID;
  }


  public EmailStatus envelopeFrom(String envelopeFrom) {
    this.envelopeFrom = envelopeFrom;
    return this;
  }

   /**
   * Envelope from address
   * @return envelopeFrom
  **/
  @javax.annotation.Nullable
  public String getEnvelopeFrom() {
    return envelopeFrom;
  }

  public void setEnvelopeFrom(String envelopeFrom) {
    this.envelopeFrom = envelopeFrom;
  }


  public EmailStatus errorCategory(MessageCategoryEnum errorCategory) {
    this.errorCategory = errorCategory;
    return this;
  }

   /**
   * Get errorCategory
   * @return errorCategory
  **/
  @javax.annotation.Nullable
  public MessageCategoryEnum getErrorCategory() {
    return errorCategory;
  }

  public void setErrorCategory(MessageCategoryEnum errorCategory) {
    this.errorCategory = errorCategory;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailStatus emailStatus = (EmailStatus) o;
    return Objects.equals(this.from, emailStatus.from) &&
        Objects.equals(this.to, emailStatus.to) &&
        Objects.equals(this.date, emailStatus.date) &&
        Objects.equals(this.status, emailStatus.status) &&
        Objects.equals(this.statusName, emailStatus.statusName) &&
        Objects.equals(this.statusChangeDate, emailStatus.statusChangeDate) &&
        Objects.equals(this.dateSent, emailStatus.dateSent) &&
        Objects.equals(this.dateOpened, emailStatus.dateOpened) &&
        Objects.equals(this.dateClicked, emailStatus.dateClicked) &&
        Objects.equals(this.errorMessage, emailStatus.errorMessage) &&
        Objects.equals(this.transactionID, emailStatus.transactionID) &&
        Objects.equals(this.envelopeFrom, emailStatus.envelopeFrom) &&
        Objects.equals(this.errorCategory, emailStatus.errorCategory);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(from, to, date, status, statusName, statusChangeDate, dateSent, dateOpened, dateClicked, errorMessage, transactionID, envelopeFrom, errorCategory);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailStatus {\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    statusName: ").append(toIndentedString(statusName)).append("\n");
    sb.append("    statusChangeDate: ").append(toIndentedString(statusChangeDate)).append("\n");
    sb.append("    dateSent: ").append(toIndentedString(dateSent)).append("\n");
    sb.append("    dateOpened: ").append(toIndentedString(dateOpened)).append("\n");
    sb.append("    dateClicked: ").append(toIndentedString(dateClicked)).append("\n");
    sb.append("    errorMessage: ").append(toIndentedString(errorMessage)).append("\n");
    sb.append("    transactionID: ").append(toIndentedString(transactionID)).append("\n");
    sb.append("    envelopeFrom: ").append(toIndentedString(envelopeFrom)).append("\n");
    sb.append("    errorCategory: ").append(toIndentedString(errorCategory)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("From");
    openapiFields.add("To");
    openapiFields.add("Date");
    openapiFields.add("Status");
    openapiFields.add("StatusName");
    openapiFields.add("StatusChangeDate");
    openapiFields.add("DateSent");
    openapiFields.add("DateOpened");
    openapiFields.add("DateClicked");
    openapiFields.add("ErrorMessage");
    openapiFields.add("TransactionID");
    openapiFields.add("EnvelopeFrom");
    openapiFields.add("ErrorCategory");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EmailStatus
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailStatus is not found in the empty JSON string", EmailStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("From") != null && !jsonObj.get("From").isJsonNull()) && !jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      if ((jsonObj.get("To") != null && !jsonObj.get("To").isJsonNull()) && !jsonObj.get("To").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `To` to be a primitive type in the JSON string but got `%s`", jsonObj.get("To").toString()));
      }
      // validate the optional field `Status`
      if (jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) {
        LogJobStatus.validateJsonElement(jsonObj.get("Status"));
      }
      if ((jsonObj.get("StatusName") != null && !jsonObj.get("StatusName").isJsonNull()) && !jsonObj.get("StatusName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `StatusName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("StatusName").toString()));
      }
      if ((jsonObj.get("ErrorMessage") != null && !jsonObj.get("ErrorMessage").isJsonNull()) && !jsonObj.get("ErrorMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ErrorMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ErrorMessage").toString()));
      }
      if ((jsonObj.get("TransactionID") != null && !jsonObj.get("TransactionID").isJsonNull()) && !jsonObj.get("TransactionID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TransactionID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TransactionID").toString()));
      }
      if ((jsonObj.get("EnvelopeFrom") != null && !jsonObj.get("EnvelopeFrom").isJsonNull()) && !jsonObj.get("EnvelopeFrom").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `EnvelopeFrom` to be a primitive type in the JSON string but got `%s`", jsonObj.get("EnvelopeFrom").toString()));
      }
      // validate the optional field `ErrorCategory`
      if (jsonObj.get("ErrorCategory") != null && !jsonObj.get("ErrorCategory").isJsonNull()) {
        MessageCategoryEnum.validateJsonElement(jsonObj.get("ErrorCategory"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailStatus>() {
           @Override
           public void write(JsonWriter out, EmailStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailStatus
  * @throws IOException if the JSON string is invalid with respect to EmailStatus
  */
  public static EmailStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailStatus.class);
  }

 /**
  * Convert an instance of EmailStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

