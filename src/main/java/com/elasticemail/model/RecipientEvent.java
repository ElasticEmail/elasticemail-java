/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import java.util.Arrays;
import com.elasticemail.model.EventType;
import com.elasticemail.model.MessageCategory;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import org.openapitools.jackson.nullable.JsonNullable;
import org.threeten.bp.OffsetDateTime;

/**
 * Detailed information about message recipient
 */
@ApiModel(description = "Detailed information about message recipient")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-01-31T08:08:48.625855188Z[Etc/UTC]")
public class RecipientEvent {
  public static final String SERIALIZED_NAME_TRANSACTION_I_D = "TransactionID";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_I_D)
  private String transactionID;

  public static final String SERIALIZED_NAME_MSG_I_D = "MsgID";
  @SerializedName(SERIALIZED_NAME_MSG_I_D)
  private String msgID;

  public static final String SERIALIZED_NAME_FROM_EMAIL = "FromEmail";
  @SerializedName(SERIALIZED_NAME_FROM_EMAIL)
  private String fromEmail;

  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private String to;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_EVENT_TYPE = "EventType";
  @SerializedName(SERIALIZED_NAME_EVENT_TYPE)
  private EventType eventType = EventType.SUBMISSION;

  public static final String SERIALIZED_NAME_EVENT_DATE = "EventDate";
  @SerializedName(SERIALIZED_NAME_EVENT_DATE)
  private OffsetDateTime eventDate;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_MESSAGE_CATEGORY = "MessageCategory";
  @SerializedName(SERIALIZED_NAME_MESSAGE_CATEGORY)
  private MessageCategory messageCategory = MessageCategory.UNKNOWN;

  public static final String SERIALIZED_NAME_NEXT_TRY_ON = "NextTryOn";
  @SerializedName(SERIALIZED_NAME_NEXT_TRY_ON)
  private OffsetDateTime nextTryOn;

  public static final String SERIALIZED_NAME_MESSAGE = "Message";
  @SerializedName(SERIALIZED_NAME_MESSAGE)
  private String message;

  public static final String SERIALIZED_NAME_IP_ADDRESS = "IPAddress";
  @SerializedName(SERIALIZED_NAME_IP_ADDRESS)
  private String ipAddress;

  public static final String SERIALIZED_NAME_POOL_NAME = "PoolName";
  @SerializedName(SERIALIZED_NAME_POOL_NAME)
  private String poolName;

  public RecipientEvent() { 
  }

  public RecipientEvent transactionID(String transactionID) {
    
    this.transactionID = transactionID;
    return this;
  }

   /**
   * ID number of transaction
   * @return transactionID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "TransactionID", value = "ID number of transaction")

  public String getTransactionID() {
    return transactionID;
  }


  public void setTransactionID(String transactionID) {
    this.transactionID = transactionID;
  }


  public RecipientEvent msgID(String msgID) {
    
    this.msgID = msgID;
    return this;
  }

   /**
   * ID number of selected message.
   * @return msgID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "ABCDE_9RPhSWiaJq_ab1g1", value = "ID number of selected message.")

  public String getMsgID() {
    return msgID;
  }


  public void setMsgID(String msgID) {
    this.msgID = msgID;
  }


  public RecipientEvent fromEmail(String fromEmail) {
    
    this.fromEmail = fromEmail;
    return this;
  }

   /**
   * Default From: email address.
   * @return fromEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "sender@yourdomain.com", value = "Default From: email address.")

  public String getFromEmail() {
    return fromEmail;
  }


  public void setFromEmail(String fromEmail) {
    this.fromEmail = fromEmail;
  }


  public RecipientEvent to(String to) {
    
    this.to = to;
    return this;
  }

   /**
   * Ending date for search in YYYY-MM-DDThh:mm:ss format.
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "2001-01-01T01:01:01", value = "Ending date for search in YYYY-MM-DDThh:mm:ss format.")

  public String getTo() {
    return to;
  }


  public void setTo(String to) {
    this.to = to;
  }


  public RecipientEvent subject(String subject) {
    
    this.subject = subject;
    return this;
  }

   /**
   * Default subject of email.
   * @return subject
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hello!", value = "Default subject of email.")

  public String getSubject() {
    return subject;
  }


  public void setSubject(String subject) {
    this.subject = subject;
  }


  public RecipientEvent eventType(EventType eventType) {
    
    this.eventType = eventType;
    return this;
  }

   /**
   * Get eventType
   * @return eventType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EventType getEventType() {
    return eventType;
  }


  public void setEventType(EventType eventType) {
    this.eventType = eventType;
  }


  public RecipientEvent eventDate(OffsetDateTime eventDate) {
    
    this.eventDate = eventDate;
    return this;
  }

   /**
   * Creation date
   * @return eventDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Creation date")

  public OffsetDateTime getEventDate() {
    return eventDate;
  }


  public void setEventDate(OffsetDateTime eventDate) {
    this.eventDate = eventDate;
  }


  public RecipientEvent channelName(String channelName) {
    
    this.channelName = channelName;
    return this;
  }

   /**
   * Name of selected channel.
   * @return channelName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Channel01", value = "Name of selected channel.")

  public String getChannelName() {
    return channelName;
  }


  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public RecipientEvent messageCategory(MessageCategory messageCategory) {
    
    this.messageCategory = messageCategory;
    return this;
  }

   /**
   * Get messageCategory
   * @return messageCategory
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public MessageCategory getMessageCategory() {
    return messageCategory;
  }


  public void setMessageCategory(MessageCategory messageCategory) {
    this.messageCategory = messageCategory;
  }


  public RecipientEvent nextTryOn(OffsetDateTime nextTryOn) {
    
    this.nextTryOn = nextTryOn;
    return this;
  }

   /**
   * Date of next try
   * @return nextTryOn
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Date of next try")

  public OffsetDateTime getNextTryOn() {
    return nextTryOn;
  }


  public void setNextTryOn(OffsetDateTime nextTryOn) {
    this.nextTryOn = nextTryOn;
  }


  public RecipientEvent message(String message) {
    
    this.message = message;
    return this;
  }

   /**
   * Content of message, HTML encoded
   * @return message
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Lorem ipsum", value = "Content of message, HTML encoded")

  public String getMessage() {
    return message;
  }


  public void setMessage(String message) {
    this.message = message;
  }


  public RecipientEvent ipAddress(String ipAddress) {
    
    this.ipAddress = ipAddress;
    return this;
  }

   /**
   * IP which this email was sent through
   * @return ipAddress
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "IP which this email was sent through")

  public String getIpAddress() {
    return ipAddress;
  }


  public void setIpAddress(String ipAddress) {
    this.ipAddress = ipAddress;
  }


  public RecipientEvent poolName(String poolName) {
    
    this.poolName = poolName;
    return this;
  }

   /**
   * Name of an IP pool this email was sent through
   * @return poolName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of an IP pool this email was sent through")

  public String getPoolName() {
    return poolName;
  }


  public void setPoolName(String poolName) {
    this.poolName = poolName;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipientEvent recipientEvent = (RecipientEvent) o;
    return Objects.equals(this.transactionID, recipientEvent.transactionID) &&
        Objects.equals(this.msgID, recipientEvent.msgID) &&
        Objects.equals(this.fromEmail, recipientEvent.fromEmail) &&
        Objects.equals(this.to, recipientEvent.to) &&
        Objects.equals(this.subject, recipientEvent.subject) &&
        Objects.equals(this.eventType, recipientEvent.eventType) &&
        Objects.equals(this.eventDate, recipientEvent.eventDate) &&
        Objects.equals(this.channelName, recipientEvent.channelName) &&
        Objects.equals(this.messageCategory, recipientEvent.messageCategory) &&
        Objects.equals(this.nextTryOn, recipientEvent.nextTryOn) &&
        Objects.equals(this.message, recipientEvent.message) &&
        Objects.equals(this.ipAddress, recipientEvent.ipAddress) &&
        Objects.equals(this.poolName, recipientEvent.poolName);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(transactionID, msgID, fromEmail, to, subject, eventType, eventDate, channelName, messageCategory, nextTryOn, message, ipAddress, poolName);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipientEvent {\n");
    sb.append("    transactionID: ").append(toIndentedString(transactionID)).append("\n");
    sb.append("    msgID: ").append(toIndentedString(msgID)).append("\n");
    sb.append("    fromEmail: ").append(toIndentedString(fromEmail)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    eventType: ").append(toIndentedString(eventType)).append("\n");
    sb.append("    eventDate: ").append(toIndentedString(eventDate)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    messageCategory: ").append(toIndentedString(messageCategory)).append("\n");
    sb.append("    nextTryOn: ").append(toIndentedString(nextTryOn)).append("\n");
    sb.append("    message: ").append(toIndentedString(message)).append("\n");
    sb.append("    ipAddress: ").append(toIndentedString(ipAddress)).append("\n");
    sb.append("    poolName: ").append(toIndentedString(poolName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

