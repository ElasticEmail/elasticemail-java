/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.elasticemail.model.Utm;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * Content of a Campaign
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T13:34:56.566653Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class CampaignTemplate {
  public static final String SERIALIZED_NAME_POOLNAME = "Poolname";
  @SerializedName(SERIALIZED_NAME_POOLNAME)
  private String poolname;

  public static final String SERIALIZED_NAME_FROM = "From";
  @SerializedName(SERIALIZED_NAME_FROM)
  private String from;

  public static final String SERIALIZED_NAME_REPLY_TO = "ReplyTo";
  @SerializedName(SERIALIZED_NAME_REPLY_TO)
  private String replyTo;

  public static final String SERIALIZED_NAME_SUBJECT = "Subject";
  @SerializedName(SERIALIZED_NAME_SUBJECT)
  private String subject;

  public static final String SERIALIZED_NAME_TEMPLATE_NAME = "TemplateName";
  @SerializedName(SERIALIZED_NAME_TEMPLATE_NAME)
  private String templateName;

  public static final String SERIALIZED_NAME_ATTACH_FILES = "AttachFiles";
  @SerializedName(SERIALIZED_NAME_ATTACH_FILES)
  private List<String> attachFiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_UTM = "Utm";
  @SerializedName(SERIALIZED_NAME_UTM)
  private Utm utm;

  public CampaignTemplate() {
  }

  public CampaignTemplate poolname(String poolname) {
    this.poolname = poolname;
    return this;
  }

   /**
   * Name of your custom IP Pool to be used in the sending process
   * @return poolname
  **/
  @javax.annotation.Nullable
  public String getPoolname() {
    return poolname;
  }

  public void setPoolname(String poolname) {
    this.poolname = poolname;
  }


  public CampaignTemplate from(String from) {
    this.from = from;
    return this;
  }

   /**
   * Your e-mail with an optional name (e.g.: John Doe &lt;email@domain.com&gt;)
   * @return from
  **/
  @javax.annotation.Nonnull
  public String getFrom() {
    return from;
  }

  public void setFrom(String from) {
    this.from = from;
  }


  public CampaignTemplate replyTo(String replyTo) {
    this.replyTo = replyTo;
    return this;
  }

   /**
   * To what address should the recipients reply to (e.g. John Doe &lt;email@domain.com&gt;)
   * @return replyTo
  **/
  @javax.annotation.Nullable
  public String getReplyTo() {
    return replyTo;
  }

  public void setReplyTo(String replyTo) {
    this.replyTo = replyTo;
  }


  public CampaignTemplate subject(String subject) {
    this.subject = subject;
    return this;
  }

   /**
   * Default subject of email.
   * @return subject
  **/
  @javax.annotation.Nullable
  public String getSubject() {
    return subject;
  }

  public void setSubject(String subject) {
    this.subject = subject;
  }


  public CampaignTemplate templateName(String templateName) {
    this.templateName = templateName;
    return this;
  }

   /**
   * Name of template.
   * @return templateName
  **/
  @javax.annotation.Nullable
  public String getTemplateName() {
    return templateName;
  }

  public void setTemplateName(String templateName) {
    this.templateName = templateName;
  }


  public CampaignTemplate attachFiles(List<String> attachFiles) {
    this.attachFiles = attachFiles;
    return this;
  }

  public CampaignTemplate addAttachFilesItem(String attachFilesItem) {
    if (this.attachFiles == null) {
      this.attachFiles = new ArrayList<>();
    }
    this.attachFiles.add(attachFilesItem);
    return this;
  }

   /**
   * Names of previously uploaded files that should be sent as downloadable attachments
   * @return attachFiles
  **/
  @javax.annotation.Nullable
  public List<String> getAttachFiles() {
    return attachFiles;
  }

  public void setAttachFiles(List<String> attachFiles) {
    this.attachFiles = attachFiles;
  }


  public CampaignTemplate utm(Utm utm) {
    this.utm = utm;
    return this;
  }

   /**
   * Get utm
   * @return utm
  **/
  @javax.annotation.Nullable
  public Utm getUtm() {
    return utm;
  }

  public void setUtm(Utm utm) {
    this.utm = utm;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CampaignTemplate campaignTemplate = (CampaignTemplate) o;
    return Objects.equals(this.poolname, campaignTemplate.poolname) &&
        Objects.equals(this.from, campaignTemplate.from) &&
        Objects.equals(this.replyTo, campaignTemplate.replyTo) &&
        Objects.equals(this.subject, campaignTemplate.subject) &&
        Objects.equals(this.templateName, campaignTemplate.templateName) &&
        Objects.equals(this.attachFiles, campaignTemplate.attachFiles) &&
        Objects.equals(this.utm, campaignTemplate.utm);
  }

  @Override
  public int hashCode() {
    return Objects.hash(poolname, from, replyTo, subject, templateName, attachFiles, utm);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CampaignTemplate {\n");
    sb.append("    poolname: ").append(toIndentedString(poolname)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    replyTo: ").append(toIndentedString(replyTo)).append("\n");
    sb.append("    subject: ").append(toIndentedString(subject)).append("\n");
    sb.append("    templateName: ").append(toIndentedString(templateName)).append("\n");
    sb.append("    attachFiles: ").append(toIndentedString(attachFiles)).append("\n");
    sb.append("    utm: ").append(toIndentedString(utm)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Poolname");
    openapiFields.add("From");
    openapiFields.add("ReplyTo");
    openapiFields.add("Subject");
    openapiFields.add("TemplateName");
    openapiFields.add("AttachFiles");
    openapiFields.add("Utm");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("From");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to CampaignTemplate
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CampaignTemplate.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CampaignTemplate is not found in the empty JSON string", CampaignTemplate.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CampaignTemplate.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CampaignTemplate` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CampaignTemplate.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Poolname") != null && !jsonObj.get("Poolname").isJsonNull()) && !jsonObj.get("Poolname").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Poolname` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Poolname").toString()));
      }
      if (!jsonObj.get("From").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `From` to be a primitive type in the JSON string but got `%s`", jsonObj.get("From").toString()));
      }
      if ((jsonObj.get("ReplyTo") != null && !jsonObj.get("ReplyTo").isJsonNull()) && !jsonObj.get("ReplyTo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ReplyTo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ReplyTo").toString()));
      }
      if ((jsonObj.get("Subject") != null && !jsonObj.get("Subject").isJsonNull()) && !jsonObj.get("Subject").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Subject` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Subject").toString()));
      }
      if ((jsonObj.get("TemplateName") != null && !jsonObj.get("TemplateName").isJsonNull()) && !jsonObj.get("TemplateName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `TemplateName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("TemplateName").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AttachFiles") != null && !jsonObj.get("AttachFiles").isJsonNull() && !jsonObj.get("AttachFiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AttachFiles` to be an array in the JSON string but got `%s`", jsonObj.get("AttachFiles").toString()));
      }
      // validate the optional field `Utm`
      if (jsonObj.get("Utm") != null && !jsonObj.get("Utm").isJsonNull()) {
        Utm.validateJsonElement(jsonObj.get("Utm"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CampaignTemplate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CampaignTemplate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CampaignTemplate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CampaignTemplate.class));

       return (TypeAdapter<T>) new TypeAdapter<CampaignTemplate>() {
           @Override
           public void write(JsonWriter out, CampaignTemplate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CampaignTemplate read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CampaignTemplate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CampaignTemplate
  * @throws IOException if the JSON string is invalid with respect to CampaignTemplate
  */
  public static CampaignTemplate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CampaignTemplate.class);
  }

 /**
  * Convert an instance of CampaignTemplate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

