/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.elasticemail.model.EmailJobFailedStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * EmailJobStatus
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T13:34:56.566653Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class EmailJobStatus {
  public static final String SERIALIZED_NAME_I_D = "ID";
  @SerializedName(SERIALIZED_NAME_I_D)
  private String ID;

  public static final String SERIALIZED_NAME_STATUS = "Status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_RECIPIENTS_COUNT = "RecipientsCount";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS_COUNT)
  private Integer recipientsCount;

  public static final String SERIALIZED_NAME_FAILED = "Failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private List<EmailJobFailedStatus> failed = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED_COUNT = "FailedCount";
  @SerializedName(SERIALIZED_NAME_FAILED_COUNT)
  private Integer failedCount;

  public static final String SERIALIZED_NAME_SENT = "Sent";
  @SerializedName(SERIALIZED_NAME_SENT)
  private List<String> sent = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENT_COUNT = "SentCount";
  @SerializedName(SERIALIZED_NAME_SENT_COUNT)
  private Integer sentCount;

  public static final String SERIALIZED_NAME_DELIVERED = "Delivered";
  @SerializedName(SERIALIZED_NAME_DELIVERED)
  private List<String> delivered = new ArrayList<>();

  public static final String SERIALIZED_NAME_DELIVERED_COUNT = "DeliveredCount";
  @SerializedName(SERIALIZED_NAME_DELIVERED_COUNT)
  private Integer deliveredCount;

  public static final String SERIALIZED_NAME_PENDING = "Pending";
  @SerializedName(SERIALIZED_NAME_PENDING)
  private List<String> pending = new ArrayList<>();

  public static final String SERIALIZED_NAME_PENDING_COUNT = "PendingCount";
  @SerializedName(SERIALIZED_NAME_PENDING_COUNT)
  private Integer pendingCount;

  public static final String SERIALIZED_NAME_OPENED = "Opened";
  @SerializedName(SERIALIZED_NAME_OPENED)
  private List<String> opened = new ArrayList<>();

  public static final String SERIALIZED_NAME_OPENED_COUNT = "OpenedCount";
  @SerializedName(SERIALIZED_NAME_OPENED_COUNT)
  private Integer openedCount;

  public static final String SERIALIZED_NAME_CLICKED = "Clicked";
  @SerializedName(SERIALIZED_NAME_CLICKED)
  private List<String> clicked = new ArrayList<>();

  public static final String SERIALIZED_NAME_CLICKED_COUNT = "ClickedCount";
  @SerializedName(SERIALIZED_NAME_CLICKED_COUNT)
  private Integer clickedCount;

  public static final String SERIALIZED_NAME_UNSUBSCRIBED = "Unsubscribed";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED)
  private List<String> unsubscribed = new ArrayList<>();

  public static final String SERIALIZED_NAME_UNSUBSCRIBED_COUNT = "UnsubscribedCount";
  @SerializedName(SERIALIZED_NAME_UNSUBSCRIBED_COUNT)
  private Integer unsubscribedCount;

  public static final String SERIALIZED_NAME_ABUSE_REPORTS = "AbuseReports";
  @SerializedName(SERIALIZED_NAME_ABUSE_REPORTS)
  private List<String> abuseReports = new ArrayList<>();

  public static final String SERIALIZED_NAME_ABUSE_REPORTS_COUNT = "AbuseReportsCount";
  @SerializedName(SERIALIZED_NAME_ABUSE_REPORTS_COUNT)
  private Integer abuseReportsCount;

  public static final String SERIALIZED_NAME_MESSAGE_I_DS = "MessageIDs";
  @SerializedName(SERIALIZED_NAME_MESSAGE_I_DS)
  private List<String> messageIDs = new ArrayList<>();

  public EmailJobStatus() {
  }

  public EmailJobStatus ID(String ID) {
    this.ID = ID;
    return this;
  }

   /**
   * ID number of your attachment
   * @return ID
  **/
  @javax.annotation.Nullable
  public String getID() {
    return ID;
  }

  public void setID(String ID) {
    this.ID = ID;
  }


  public EmailJobStatus status(String status) {
    this.status = status;
    return this;
  }

   /**
   * Name of status: submitted, complete, in_progress
   * @return status
  **/
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public EmailJobStatus recipientsCount(Integer recipientsCount) {
    this.recipientsCount = recipientsCount;
    return this;
  }

   /**
   * Get recipientsCount
   * @return recipientsCount
  **/
  @javax.annotation.Nullable
  public Integer getRecipientsCount() {
    return recipientsCount;
  }

  public void setRecipientsCount(Integer recipientsCount) {
    this.recipientsCount = recipientsCount;
  }


  public EmailJobStatus failed(List<EmailJobFailedStatus> failed) {
    this.failed = failed;
    return this;
  }

  public EmailJobStatus addFailedItem(EmailJobFailedStatus failedItem) {
    if (this.failed == null) {
      this.failed = new ArrayList<>();
    }
    this.failed.add(failedItem);
    return this;
  }

   /**
   * Get failed
   * @return failed
  **/
  @javax.annotation.Nullable
  public List<EmailJobFailedStatus> getFailed() {
    return failed;
  }

  public void setFailed(List<EmailJobFailedStatus> failed) {
    this.failed = failed;
  }


  public EmailJobStatus failedCount(Integer failedCount) {
    this.failedCount = failedCount;
    return this;
  }

   /**
   * Total emails failed.
   * @return failedCount
  **/
  @javax.annotation.Nullable
  public Integer getFailedCount() {
    return failedCount;
  }

  public void setFailedCount(Integer failedCount) {
    this.failedCount = failedCount;
  }


  public EmailJobStatus sent(List<String> sent) {
    this.sent = sent;
    return this;
  }

  public EmailJobStatus addSentItem(String sentItem) {
    if (this.sent == null) {
      this.sent = new ArrayList<>();
    }
    this.sent.add(sentItem);
    return this;
  }

   /**
   * Get sent
   * @return sent
  **/
  @javax.annotation.Nullable
  public List<String> getSent() {
    return sent;
  }

  public void setSent(List<String> sent) {
    this.sent = sent;
  }


  public EmailJobStatus sentCount(Integer sentCount) {
    this.sentCount = sentCount;
    return this;
  }

   /**
   * Total emails sent.
   * @return sentCount
  **/
  @javax.annotation.Nullable
  public Integer getSentCount() {
    return sentCount;
  }

  public void setSentCount(Integer sentCount) {
    this.sentCount = sentCount;
  }


  public EmailJobStatus delivered(List<String> delivered) {
    this.delivered = delivered;
    return this;
  }

  public EmailJobStatus addDeliveredItem(String deliveredItem) {
    if (this.delivered == null) {
      this.delivered = new ArrayList<>();
    }
    this.delivered.add(deliveredItem);
    return this;
  }

   /**
   * Number of delivered messages
   * @return delivered
  **/
  @javax.annotation.Nullable
  public List<String> getDelivered() {
    return delivered;
  }

  public void setDelivered(List<String> delivered) {
    this.delivered = delivered;
  }


  public EmailJobStatus deliveredCount(Integer deliveredCount) {
    this.deliveredCount = deliveredCount;
    return this;
  }

   /**
   * Get deliveredCount
   * @return deliveredCount
  **/
  @javax.annotation.Nullable
  public Integer getDeliveredCount() {
    return deliveredCount;
  }

  public void setDeliveredCount(Integer deliveredCount) {
    this.deliveredCount = deliveredCount;
  }


  public EmailJobStatus pending(List<String> pending) {
    this.pending = pending;
    return this;
  }

  public EmailJobStatus addPendingItem(String pendingItem) {
    if (this.pending == null) {
      this.pending = new ArrayList<>();
    }
    this.pending.add(pendingItem);
    return this;
  }

   /**
   * Get pending
   * @return pending
  **/
  @javax.annotation.Nullable
  public List<String> getPending() {
    return pending;
  }

  public void setPending(List<String> pending) {
    this.pending = pending;
  }


  public EmailJobStatus pendingCount(Integer pendingCount) {
    this.pendingCount = pendingCount;
    return this;
  }

   /**
   * Get pendingCount
   * @return pendingCount
  **/
  @javax.annotation.Nullable
  public Integer getPendingCount() {
    return pendingCount;
  }

  public void setPendingCount(Integer pendingCount) {
    this.pendingCount = pendingCount;
  }


  public EmailJobStatus opened(List<String> opened) {
    this.opened = opened;
    return this;
  }

  public EmailJobStatus addOpenedItem(String openedItem) {
    if (this.opened == null) {
      this.opened = new ArrayList<>();
    }
    this.opened.add(openedItem);
    return this;
  }

   /**
   * Number of opened messages
   * @return opened
  **/
  @javax.annotation.Nullable
  public List<String> getOpened() {
    return opened;
  }

  public void setOpened(List<String> opened) {
    this.opened = opened;
  }


  public EmailJobStatus openedCount(Integer openedCount) {
    this.openedCount = openedCount;
    return this;
  }

   /**
   * Total emails opened.
   * @return openedCount
  **/
  @javax.annotation.Nullable
  public Integer getOpenedCount() {
    return openedCount;
  }

  public void setOpenedCount(Integer openedCount) {
    this.openedCount = openedCount;
  }


  public EmailJobStatus clicked(List<String> clicked) {
    this.clicked = clicked;
    return this;
  }

  public EmailJobStatus addClickedItem(String clickedItem) {
    if (this.clicked == null) {
      this.clicked = new ArrayList<>();
    }
    this.clicked.add(clickedItem);
    return this;
  }

   /**
   * Number of clicked messages
   * @return clicked
  **/
  @javax.annotation.Nullable
  public List<String> getClicked() {
    return clicked;
  }

  public void setClicked(List<String> clicked) {
    this.clicked = clicked;
  }


  public EmailJobStatus clickedCount(Integer clickedCount) {
    this.clickedCount = clickedCount;
    return this;
  }

   /**
   * Total emails clicked
   * @return clickedCount
  **/
  @javax.annotation.Nullable
  public Integer getClickedCount() {
    return clickedCount;
  }

  public void setClickedCount(Integer clickedCount) {
    this.clickedCount = clickedCount;
  }


  public EmailJobStatus unsubscribed(List<String> unsubscribed) {
    this.unsubscribed = unsubscribed;
    return this;
  }

  public EmailJobStatus addUnsubscribedItem(String unsubscribedItem) {
    if (this.unsubscribed == null) {
      this.unsubscribed = new ArrayList<>();
    }
    this.unsubscribed.add(unsubscribedItem);
    return this;
  }

   /**
   * Number of unsubscribed messages
   * @return unsubscribed
  **/
  @javax.annotation.Nullable
  public List<String> getUnsubscribed() {
    return unsubscribed;
  }

  public void setUnsubscribed(List<String> unsubscribed) {
    this.unsubscribed = unsubscribed;
  }


  public EmailJobStatus unsubscribedCount(Integer unsubscribedCount) {
    this.unsubscribedCount = unsubscribedCount;
    return this;
  }

   /**
   * Total emails unsubscribed
   * @return unsubscribedCount
  **/
  @javax.annotation.Nullable
  public Integer getUnsubscribedCount() {
    return unsubscribedCount;
  }

  public void setUnsubscribedCount(Integer unsubscribedCount) {
    this.unsubscribedCount = unsubscribedCount;
  }


  public EmailJobStatus abuseReports(List<String> abuseReports) {
    this.abuseReports = abuseReports;
    return this;
  }

  public EmailJobStatus addAbuseReportsItem(String abuseReportsItem) {
    if (this.abuseReports == null) {
      this.abuseReports = new ArrayList<>();
    }
    this.abuseReports.add(abuseReportsItem);
    return this;
  }

   /**
   * Get abuseReports
   * @return abuseReports
  **/
  @javax.annotation.Nullable
  public List<String> getAbuseReports() {
    return abuseReports;
  }

  public void setAbuseReports(List<String> abuseReports) {
    this.abuseReports = abuseReports;
  }


  public EmailJobStatus abuseReportsCount(Integer abuseReportsCount) {
    this.abuseReportsCount = abuseReportsCount;
    return this;
  }

   /**
   * Get abuseReportsCount
   * @return abuseReportsCount
  **/
  @javax.annotation.Nullable
  public Integer getAbuseReportsCount() {
    return abuseReportsCount;
  }

  public void setAbuseReportsCount(Integer abuseReportsCount) {
    this.abuseReportsCount = abuseReportsCount;
  }


  public EmailJobStatus messageIDs(List<String> messageIDs) {
    this.messageIDs = messageIDs;
    return this;
  }

  public EmailJobStatus addMessageIDsItem(String messageIDsItem) {
    if (this.messageIDs == null) {
      this.messageIDs = new ArrayList<>();
    }
    this.messageIDs.add(messageIDsItem);
    return this;
  }

   /**
   * List of all MessageIDs for this job.
   * @return messageIDs
  **/
  @javax.annotation.Nullable
  public List<String> getMessageIDs() {
    return messageIDs;
  }

  public void setMessageIDs(List<String> messageIDs) {
    this.messageIDs = messageIDs;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmailJobStatus emailJobStatus = (EmailJobStatus) o;
    return Objects.equals(this.ID, emailJobStatus.ID) &&
        Objects.equals(this.status, emailJobStatus.status) &&
        Objects.equals(this.recipientsCount, emailJobStatus.recipientsCount) &&
        Objects.equals(this.failed, emailJobStatus.failed) &&
        Objects.equals(this.failedCount, emailJobStatus.failedCount) &&
        Objects.equals(this.sent, emailJobStatus.sent) &&
        Objects.equals(this.sentCount, emailJobStatus.sentCount) &&
        Objects.equals(this.delivered, emailJobStatus.delivered) &&
        Objects.equals(this.deliveredCount, emailJobStatus.deliveredCount) &&
        Objects.equals(this.pending, emailJobStatus.pending) &&
        Objects.equals(this.pendingCount, emailJobStatus.pendingCount) &&
        Objects.equals(this.opened, emailJobStatus.opened) &&
        Objects.equals(this.openedCount, emailJobStatus.openedCount) &&
        Objects.equals(this.clicked, emailJobStatus.clicked) &&
        Objects.equals(this.clickedCount, emailJobStatus.clickedCount) &&
        Objects.equals(this.unsubscribed, emailJobStatus.unsubscribed) &&
        Objects.equals(this.unsubscribedCount, emailJobStatus.unsubscribedCount) &&
        Objects.equals(this.abuseReports, emailJobStatus.abuseReports) &&
        Objects.equals(this.abuseReportsCount, emailJobStatus.abuseReportsCount) &&
        Objects.equals(this.messageIDs, emailJobStatus.messageIDs);
  }

  @Override
  public int hashCode() {
    return Objects.hash(ID, status, recipientsCount, failed, failedCount, sent, sentCount, delivered, deliveredCount, pending, pendingCount, opened, openedCount, clicked, clickedCount, unsubscribed, unsubscribedCount, abuseReports, abuseReportsCount, messageIDs);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmailJobStatus {\n");
    sb.append("    ID: ").append(toIndentedString(ID)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    recipientsCount: ").append(toIndentedString(recipientsCount)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("    failedCount: ").append(toIndentedString(failedCount)).append("\n");
    sb.append("    sent: ").append(toIndentedString(sent)).append("\n");
    sb.append("    sentCount: ").append(toIndentedString(sentCount)).append("\n");
    sb.append("    delivered: ").append(toIndentedString(delivered)).append("\n");
    sb.append("    deliveredCount: ").append(toIndentedString(deliveredCount)).append("\n");
    sb.append("    pending: ").append(toIndentedString(pending)).append("\n");
    sb.append("    pendingCount: ").append(toIndentedString(pendingCount)).append("\n");
    sb.append("    opened: ").append(toIndentedString(opened)).append("\n");
    sb.append("    openedCount: ").append(toIndentedString(openedCount)).append("\n");
    sb.append("    clicked: ").append(toIndentedString(clicked)).append("\n");
    sb.append("    clickedCount: ").append(toIndentedString(clickedCount)).append("\n");
    sb.append("    unsubscribed: ").append(toIndentedString(unsubscribed)).append("\n");
    sb.append("    unsubscribedCount: ").append(toIndentedString(unsubscribedCount)).append("\n");
    sb.append("    abuseReports: ").append(toIndentedString(abuseReports)).append("\n");
    sb.append("    abuseReportsCount: ").append(toIndentedString(abuseReportsCount)).append("\n");
    sb.append("    messageIDs: ").append(toIndentedString(messageIDs)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ID");
    openapiFields.add("Status");
    openapiFields.add("RecipientsCount");
    openapiFields.add("Failed");
    openapiFields.add("FailedCount");
    openapiFields.add("Sent");
    openapiFields.add("SentCount");
    openapiFields.add("Delivered");
    openapiFields.add("DeliveredCount");
    openapiFields.add("Pending");
    openapiFields.add("PendingCount");
    openapiFields.add("Opened");
    openapiFields.add("OpenedCount");
    openapiFields.add("Clicked");
    openapiFields.add("ClickedCount");
    openapiFields.add("Unsubscribed");
    openapiFields.add("UnsubscribedCount");
    openapiFields.add("AbuseReports");
    openapiFields.add("AbuseReportsCount");
    openapiFields.add("MessageIDs");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to EmailJobStatus
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EmailJobStatus.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmailJobStatus is not found in the empty JSON string", EmailJobStatus.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EmailJobStatus.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EmailJobStatus` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ID") != null && !jsonObj.get("ID").isJsonNull()) && !jsonObj.get("ID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ID").toString()));
      }
      if ((jsonObj.get("Status") != null && !jsonObj.get("Status").isJsonNull()) && !jsonObj.get("Status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Status").toString()));
      }
      if (jsonObj.get("Failed") != null && !jsonObj.get("Failed").isJsonNull()) {
        JsonArray jsonArrayfailed = jsonObj.getAsJsonArray("Failed");
        if (jsonArrayfailed != null) {
          // ensure the json data is an array
          if (!jsonObj.get("Failed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `Failed` to be an array in the JSON string but got `%s`", jsonObj.get("Failed").toString()));
          }

          // validate the optional field `Failed` (array)
          for (int i = 0; i < jsonArrayfailed.size(); i++) {
            EmailJobFailedStatus.validateJsonElement(jsonArrayfailed.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Sent") != null && !jsonObj.get("Sent").isJsonNull() && !jsonObj.get("Sent").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Sent` to be an array in the JSON string but got `%s`", jsonObj.get("Sent").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Delivered") != null && !jsonObj.get("Delivered").isJsonNull() && !jsonObj.get("Delivered").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Delivered` to be an array in the JSON string but got `%s`", jsonObj.get("Delivered").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Pending") != null && !jsonObj.get("Pending").isJsonNull() && !jsonObj.get("Pending").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Pending` to be an array in the JSON string but got `%s`", jsonObj.get("Pending").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Opened") != null && !jsonObj.get("Opened").isJsonNull() && !jsonObj.get("Opened").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Opened` to be an array in the JSON string but got `%s`", jsonObj.get("Opened").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Clicked") != null && !jsonObj.get("Clicked").isJsonNull() && !jsonObj.get("Clicked").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Clicked` to be an array in the JSON string but got `%s`", jsonObj.get("Clicked").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("Unsubscribed") != null && !jsonObj.get("Unsubscribed").isJsonNull() && !jsonObj.get("Unsubscribed").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `Unsubscribed` to be an array in the JSON string but got `%s`", jsonObj.get("Unsubscribed").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AbuseReports") != null && !jsonObj.get("AbuseReports").isJsonNull() && !jsonObj.get("AbuseReports").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AbuseReports` to be an array in the JSON string but got `%s`", jsonObj.get("AbuseReports").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("MessageIDs") != null && !jsonObj.get("MessageIDs").isJsonNull() && !jsonObj.get("MessageIDs").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `MessageIDs` to be an array in the JSON string but got `%s`", jsonObj.get("MessageIDs").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmailJobStatus.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmailJobStatus' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmailJobStatus> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmailJobStatus.class));

       return (TypeAdapter<T>) new TypeAdapter<EmailJobStatus>() {
           @Override
           public void write(JsonWriter out, EmailJobStatus value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EmailJobStatus read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmailJobStatus given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmailJobStatus
  * @throws IOException if the JSON string is invalid with respect to EmailJobStatus
  */
  public static EmailJobStatus fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmailJobStatus.class);
  }

 /**
  * Convert an instance of EmailJobStatus to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

