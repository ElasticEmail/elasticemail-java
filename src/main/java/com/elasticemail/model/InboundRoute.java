/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.elasticemail.model.InboundRouteActionType;
import com.elasticemail.model.InboundRouteFilterType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * InboundRoute
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T13:34:56.566653Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class InboundRoute {
  public static final String SERIALIZED_NAME_PUBLIC_ID = "PublicId";
  @SerializedName(SERIALIZED_NAME_PUBLIC_ID)
  private String publicId;

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_FILTER_TYPE = "FilterType";
  @SerializedName(SERIALIZED_NAME_FILTER_TYPE)
  private InboundRouteFilterType filterType = InboundRouteFilterType.EMAILADDRESS;

  public static final String SERIALIZED_NAME_FILTER = "Filter";
  @SerializedName(SERIALIZED_NAME_FILTER)
  private String filter;

  public static final String SERIALIZED_NAME_ACTION_TYPE = "ActionType";
  @SerializedName(SERIALIZED_NAME_ACTION_TYPE)
  private InboundRouteActionType actionType = InboundRouteActionType.FORWARDTOEMAIL;

  public static final String SERIALIZED_NAME_ACTION_PARAMETER = "ActionParameter";
  @SerializedName(SERIALIZED_NAME_ACTION_PARAMETER)
  private String actionParameter;

  public static final String SERIALIZED_NAME_SORT_ORDER = "SortOrder";
  @SerializedName(SERIALIZED_NAME_SORT_ORDER)
  private Integer sortOrder;

  public InboundRoute() {
  }

  public InboundRoute publicId(String publicId) {
    this.publicId = publicId;
    return this;
  }

   /**
   * Get publicId
   * @return publicId
  **/
  @javax.annotation.Nullable
  public String getPublicId() {
    return publicId;
  }

  public void setPublicId(String publicId) {
    this.publicId = publicId;
  }


  public InboundRoute name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of this route
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public InboundRoute filterType(InboundRouteFilterType filterType) {
    this.filterType = filterType;
    return this;
  }

   /**
   * Get filterType
   * @return filterType
  **/
  @javax.annotation.Nullable
  public InboundRouteFilterType getFilterType() {
    return filterType;
  }

  public void setFilterType(InboundRouteFilterType filterType) {
    this.filterType = filterType;
  }


  public InboundRoute filter(String filter) {
    this.filter = filter;
    return this;
  }

   /**
   * Filter of the inbound data
   * @return filter
  **/
  @javax.annotation.Nullable
  public String getFilter() {
    return filter;
  }

  public void setFilter(String filter) {
    this.filter = filter;
  }


  public InboundRoute actionType(InboundRouteActionType actionType) {
    this.actionType = actionType;
    return this;
  }

   /**
   * Get actionType
   * @return actionType
  **/
  @javax.annotation.Nullable
  public InboundRouteActionType getActionType() {
    return actionType;
  }

  public void setActionType(InboundRouteActionType actionType) {
    this.actionType = actionType;
  }


  public InboundRoute actionParameter(String actionParameter) {
    this.actionParameter = actionParameter;
    return this;
  }

   /**
   * URL address or Email to notify about the inbound
   * @return actionParameter
  **/
  @javax.annotation.Nullable
  public String getActionParameter() {
    return actionParameter;
  }

  public void setActionParameter(String actionParameter) {
    this.actionParameter = actionParameter;
  }


  public InboundRoute sortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
    return this;
  }

   /**
   * Place of this route in your routes queue&#39;s order
   * @return sortOrder
  **/
  @javax.annotation.Nullable
  public Integer getSortOrder() {
    return sortOrder;
  }

  public void setSortOrder(Integer sortOrder) {
    this.sortOrder = sortOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InboundRoute inboundRoute = (InboundRoute) o;
    return Objects.equals(this.publicId, inboundRoute.publicId) &&
        Objects.equals(this.name, inboundRoute.name) &&
        Objects.equals(this.filterType, inboundRoute.filterType) &&
        Objects.equals(this.filter, inboundRoute.filter) &&
        Objects.equals(this.actionType, inboundRoute.actionType) &&
        Objects.equals(this.actionParameter, inboundRoute.actionParameter) &&
        Objects.equals(this.sortOrder, inboundRoute.sortOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(publicId, name, filterType, filter, actionType, actionParameter, sortOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InboundRoute {\n");
    sb.append("    publicId: ").append(toIndentedString(publicId)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    filterType: ").append(toIndentedString(filterType)).append("\n");
    sb.append("    filter: ").append(toIndentedString(filter)).append("\n");
    sb.append("    actionType: ").append(toIndentedString(actionType)).append("\n");
    sb.append("    actionParameter: ").append(toIndentedString(actionParameter)).append("\n");
    sb.append("    sortOrder: ").append(toIndentedString(sortOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("PublicId");
    openapiFields.add("Name");
    openapiFields.add("FilterType");
    openapiFields.add("Filter");
    openapiFields.add("ActionType");
    openapiFields.add("ActionParameter");
    openapiFields.add("SortOrder");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to InboundRoute
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InboundRoute.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InboundRoute is not found in the empty JSON string", InboundRoute.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InboundRoute.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InboundRoute` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PublicId") != null && !jsonObj.get("PublicId").isJsonNull()) && !jsonObj.get("PublicId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PublicId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PublicId").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // validate the optional field `FilterType`
      if (jsonObj.get("FilterType") != null && !jsonObj.get("FilterType").isJsonNull()) {
        InboundRouteFilterType.validateJsonElement(jsonObj.get("FilterType"));
      }
      if ((jsonObj.get("Filter") != null && !jsonObj.get("Filter").isJsonNull()) && !jsonObj.get("Filter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Filter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Filter").toString()));
      }
      // validate the optional field `ActionType`
      if (jsonObj.get("ActionType") != null && !jsonObj.get("ActionType").isJsonNull()) {
        InboundRouteActionType.validateJsonElement(jsonObj.get("ActionType"));
      }
      if ((jsonObj.get("ActionParameter") != null && !jsonObj.get("ActionParameter").isJsonNull()) && !jsonObj.get("ActionParameter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ActionParameter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ActionParameter").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InboundRoute.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InboundRoute' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InboundRoute> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InboundRoute.class));

       return (TypeAdapter<T>) new TypeAdapter<InboundRoute>() {
           @Override
           public void write(JsonWriter out, InboundRoute value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InboundRoute read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InboundRoute given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InboundRoute
  * @throws IOException if the JSON string is invalid with respect to InboundRoute
  */
  public static InboundRoute fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InboundRoute.class);
  }

 /**
  * Convert an instance of InboundRoute to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

