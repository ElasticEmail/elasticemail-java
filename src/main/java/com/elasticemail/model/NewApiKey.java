/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.elasticemail.model.AccessLevel;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * Newly generated ApiKey with Token
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T13:34:56.566653Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class NewApiKey {
  public static final String SERIALIZED_NAME_TOKEN = "Token";
  @SerializedName(SERIALIZED_NAME_TOKEN)
  private String token;

  public static final String SERIALIZED_NAME_ACCESS_LEVEL = "AccessLevel";
  @SerializedName(SERIALIZED_NAME_ACCESS_LEVEL)
  private List<AccessLevel> accessLevel = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "Name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_DATE_CREATED = "DateCreated";
  @SerializedName(SERIALIZED_NAME_DATE_CREATED)
  private OffsetDateTime dateCreated;

  public static final String SERIALIZED_NAME_LAST_USE = "LastUse";
  @SerializedName(SERIALIZED_NAME_LAST_USE)
  private OffsetDateTime lastUse;

  public static final String SERIALIZED_NAME_EXPIRES = "Expires";
  @SerializedName(SERIALIZED_NAME_EXPIRES)
  private OffsetDateTime expires;

  public static final String SERIALIZED_NAME_RESTRICT_ACCESS_TO_I_P_RANGE = "RestrictAccessToIPRange";
  @SerializedName(SERIALIZED_NAME_RESTRICT_ACCESS_TO_I_P_RANGE)
  private List<String> restrictAccessToIPRange = new ArrayList<>();

  public NewApiKey() {
  }

  public NewApiKey token(String token) {
    this.token = token;
    return this;
  }

   /**
   * Unique token to be used in the system
   * @return token
  **/
  @javax.annotation.Nullable
  public String getToken() {
    return token;
  }

  public void setToken(String token) {
    this.token = token;
  }


  public NewApiKey accessLevel(List<AccessLevel> accessLevel) {
    this.accessLevel = accessLevel;
    return this;
  }

  public NewApiKey addAccessLevelItem(AccessLevel accessLevelItem) {
    if (this.accessLevel == null) {
      this.accessLevel = new ArrayList<>();
    }
    this.accessLevel.add(accessLevelItem);
    return this;
  }

   /**
   * Access level or permission to be assigned to this ApiKey.
   * @return accessLevel
  **/
  @javax.annotation.Nullable
  public List<AccessLevel> getAccessLevel() {
    return accessLevel;
  }

  public void setAccessLevel(List<AccessLevel> accessLevel) {
    this.accessLevel = accessLevel;
  }


  public NewApiKey name(String name) {
    this.name = name;
    return this;
  }

   /**
   * Name of the ApiKey.
   * @return name
  **/
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public NewApiKey dateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
    return this;
  }

   /**
   * Date this ApiKey was created.
   * @return dateCreated
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getDateCreated() {
    return dateCreated;
  }

  public void setDateCreated(OffsetDateTime dateCreated) {
    this.dateCreated = dateCreated;
  }


  public NewApiKey lastUse(OffsetDateTime lastUse) {
    this.lastUse = lastUse;
    return this;
  }

   /**
   * Date this ApiKey was last used.
   * @return lastUse
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getLastUse() {
    return lastUse;
  }

  public void setLastUse(OffsetDateTime lastUse) {
    this.lastUse = lastUse;
  }


  public NewApiKey expires(OffsetDateTime expires) {
    this.expires = expires;
    return this;
  }

   /**
   * Date this ApiKey expires.
   * @return expires
  **/
  @javax.annotation.Nullable
  public OffsetDateTime getExpires() {
    return expires;
  }

  public void setExpires(OffsetDateTime expires) {
    this.expires = expires;
  }


  public NewApiKey restrictAccessToIPRange(List<String> restrictAccessToIPRange) {
    this.restrictAccessToIPRange = restrictAccessToIPRange;
    return this;
  }

  public NewApiKey addRestrictAccessToIPRangeItem(String restrictAccessToIPRangeItem) {
    if (this.restrictAccessToIPRange == null) {
      this.restrictAccessToIPRange = new ArrayList<>();
    }
    this.restrictAccessToIPRange.add(restrictAccessToIPRangeItem);
    return this;
  }

   /**
   * Which IPs can use this ApiKey
   * @return restrictAccessToIPRange
  **/
  @javax.annotation.Nullable
  public List<String> getRestrictAccessToIPRange() {
    return restrictAccessToIPRange;
  }

  public void setRestrictAccessToIPRange(List<String> restrictAccessToIPRange) {
    this.restrictAccessToIPRange = restrictAccessToIPRange;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewApiKey newApiKey = (NewApiKey) o;
    return Objects.equals(this.token, newApiKey.token) &&
        Objects.equals(this.accessLevel, newApiKey.accessLevel) &&
        Objects.equals(this.name, newApiKey.name) &&
        Objects.equals(this.dateCreated, newApiKey.dateCreated) &&
        Objects.equals(this.lastUse, newApiKey.lastUse) &&
        Objects.equals(this.expires, newApiKey.expires) &&
        Objects.equals(this.restrictAccessToIPRange, newApiKey.restrictAccessToIPRange);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(token, accessLevel, name, dateCreated, lastUse, expires, restrictAccessToIPRange);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewApiKey {\n");
    sb.append("    token: ").append(toIndentedString(token)).append("\n");
    sb.append("    accessLevel: ").append(toIndentedString(accessLevel)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    dateCreated: ").append(toIndentedString(dateCreated)).append("\n");
    sb.append("    lastUse: ").append(toIndentedString(lastUse)).append("\n");
    sb.append("    expires: ").append(toIndentedString(expires)).append("\n");
    sb.append("    restrictAccessToIPRange: ").append(toIndentedString(restrictAccessToIPRange)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("Token");
    openapiFields.add("AccessLevel");
    openapiFields.add("Name");
    openapiFields.add("DateCreated");
    openapiFields.add("LastUse");
    openapiFields.add("Expires");
    openapiFields.add("RestrictAccessToIPRange");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to NewApiKey
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!NewApiKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewApiKey is not found in the empty JSON string", NewApiKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!NewApiKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `NewApiKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("Token") != null && !jsonObj.get("Token").isJsonNull()) && !jsonObj.get("Token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Token").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("AccessLevel") != null && !jsonObj.get("AccessLevel").isJsonNull() && !jsonObj.get("AccessLevel").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `AccessLevel` to be an array in the JSON string but got `%s`", jsonObj.get("AccessLevel").toString()));
      }
      if ((jsonObj.get("Name") != null && !jsonObj.get("Name").isJsonNull()) && !jsonObj.get("Name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("RestrictAccessToIPRange") != null && !jsonObj.get("RestrictAccessToIPRange").isJsonNull() && !jsonObj.get("RestrictAccessToIPRange").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `RestrictAccessToIPRange` to be an array in the JSON string but got `%s`", jsonObj.get("RestrictAccessToIPRange").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewApiKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewApiKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewApiKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewApiKey.class));

       return (TypeAdapter<T>) new TypeAdapter<NewApiKey>() {
           @Override
           public void write(JsonWriter out, NewApiKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public NewApiKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewApiKey given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewApiKey
  * @throws IOException if the JSON string is invalid with respect to NewApiKey
  */
  public static NewApiKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewApiKey.class);
  }

 /**
  * Convert an instance of NewApiKey to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

