/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.elasticemail.model.EncodingType;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * E-mail configuration
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-08T09:36:05.709243Z[Etc/UTC]", comments = "Generator version: 7.7.0")
public class Options {
  public static final String SERIALIZED_NAME_TIME_OFFSET = "TimeOffset";
  @SerializedName(SERIALIZED_NAME_TIME_OFFSET)
  private Integer timeOffset;

  public static final String SERIALIZED_NAME_POOL_NAME = "PoolName";
  @SerializedName(SERIALIZED_NAME_POOL_NAME)
  private String poolName;

  public static final String SERIALIZED_NAME_CHANNEL_NAME = "ChannelName";
  @SerializedName(SERIALIZED_NAME_CHANNEL_NAME)
  private String channelName;

  public static final String SERIALIZED_NAME_ENCODING = "Encoding";
  @SerializedName(SERIALIZED_NAME_ENCODING)
  private EncodingType encoding = EncodingType.USER_PROVIDED;

  public static final String SERIALIZED_NAME_TRACK_OPENS = "TrackOpens";
  @SerializedName(SERIALIZED_NAME_TRACK_OPENS)
  private Boolean trackOpens;

  public static final String SERIALIZED_NAME_TRACK_CLICKS = "TrackClicks";
  @SerializedName(SERIALIZED_NAME_TRACK_CLICKS)
  private Boolean trackClicks;

  public Options() {
  }

  public Options timeOffset(Integer timeOffset) {
    this.timeOffset = timeOffset;
    return this;
  }

  /**
   * By how long should an e-mail be delayed (in minutes). Maximum is 35 days.
   * @return timeOffset
   */
  @javax.annotation.Nullable
  public Integer getTimeOffset() {
    return timeOffset;
  }

  public void setTimeOffset(Integer timeOffset) {
    this.timeOffset = timeOffset;
  }


  public Options poolName(String poolName) {
    this.poolName = poolName;
    return this;
  }

  /**
   * Name of your custom IP Pool to be used in the sending process
   * @return poolName
   */
  @javax.annotation.Nullable
  public String getPoolName() {
    return poolName;
  }

  public void setPoolName(String poolName) {
    this.poolName = poolName;
  }


  public Options channelName(String channelName) {
    this.channelName = channelName;
    return this;
  }

  /**
   * Name of selected channel.
   * @return channelName
   */
  @javax.annotation.Nullable
  public String getChannelName() {
    return channelName;
  }

  public void setChannelName(String channelName) {
    this.channelName = channelName;
  }


  public Options encoding(EncodingType encoding) {
    this.encoding = encoding;
    return this;
  }

  /**
   * Get encoding
   * @return encoding
   */
  @javax.annotation.Nullable
  public EncodingType getEncoding() {
    return encoding;
  }

  public void setEncoding(EncodingType encoding) {
    this.encoding = encoding;
  }


  public Options trackOpens(Boolean trackOpens) {
    this.trackOpens = trackOpens;
    return this;
  }

  /**
   * Should the opens be tracked? If no value has been provided, Account&#39;s default setting will be used.
   * @return trackOpens
   */
  @javax.annotation.Nullable
  public Boolean getTrackOpens() {
    return trackOpens;
  }

  public void setTrackOpens(Boolean trackOpens) {
    this.trackOpens = trackOpens;
  }


  public Options trackClicks(Boolean trackClicks) {
    this.trackClicks = trackClicks;
    return this;
  }

  /**
   * Should the clicks be tracked? If no value has been provided, Account&#39;s default setting will be used.
   * @return trackClicks
   */
  @javax.annotation.Nullable
  public Boolean getTrackClicks() {
    return trackClicks;
  }

  public void setTrackClicks(Boolean trackClicks) {
    this.trackClicks = trackClicks;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Options options = (Options) o;
    return Objects.equals(this.timeOffset, options.timeOffset) &&
        Objects.equals(this.poolName, options.poolName) &&
        Objects.equals(this.channelName, options.channelName) &&
        Objects.equals(this.encoding, options.encoding) &&
        Objects.equals(this.trackOpens, options.trackOpens) &&
        Objects.equals(this.trackClicks, options.trackClicks);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(timeOffset, poolName, channelName, encoding, trackOpens, trackClicks);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Options {\n");
    sb.append("    timeOffset: ").append(toIndentedString(timeOffset)).append("\n");
    sb.append("    poolName: ").append(toIndentedString(poolName)).append("\n");
    sb.append("    channelName: ").append(toIndentedString(channelName)).append("\n");
    sb.append("    encoding: ").append(toIndentedString(encoding)).append("\n");
    sb.append("    trackOpens: ").append(toIndentedString(trackOpens)).append("\n");
    sb.append("    trackClicks: ").append(toIndentedString(trackClicks)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("TimeOffset");
    openapiFields.add("PoolName");
    openapiFields.add("ChannelName");
    openapiFields.add("Encoding");
    openapiFields.add("TrackOpens");
    openapiFields.add("TrackClicks");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Options
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Options.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Options is not found in the empty JSON string", Options.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Options.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Options` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("PoolName") != null && !jsonObj.get("PoolName").isJsonNull()) && !jsonObj.get("PoolName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `PoolName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("PoolName").toString()));
      }
      if ((jsonObj.get("ChannelName") != null && !jsonObj.get("ChannelName").isJsonNull()) && !jsonObj.get("ChannelName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ChannelName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ChannelName").toString()));
      }
      // validate the optional field `Encoding`
      if (jsonObj.get("Encoding") != null && !jsonObj.get("Encoding").isJsonNull()) {
        EncodingType.validateJsonElement(jsonObj.get("Encoding"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Options.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Options' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Options> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Options.class));

       return (TypeAdapter<T>) new TypeAdapter<Options>() {
           @Override
           public void write(JsonWriter out, Options value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Options read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Options given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Options
   * @throws IOException if the JSON string is invalid with respect to Options
   */
  public static Options fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Options.class);
  }

  /**
   * Convert an instance of Options to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

