/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * List of transactional recipients
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T13:34:56.566653Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class TransactionalRecipient {
  public static final String SERIALIZED_NAME_TO = "To";
  @SerializedName(SERIALIZED_NAME_TO)
  private List<String> to = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_C = "CC";
  @SerializedName(SERIALIZED_NAME_C_C)
  private List<String> CC = new ArrayList<>();

  public static final String SERIALIZED_NAME_B_C_C = "BCC";
  @SerializedName(SERIALIZED_NAME_B_C_C)
  private List<String> BCC = new ArrayList<>();

  public TransactionalRecipient() {
  }

  public TransactionalRecipient to(List<String> to) {
    this.to = to;
    return this;
  }

  public TransactionalRecipient addToItem(String toItem) {
    if (this.to == null) {
      this.to = new ArrayList<>();
    }
    this.to.add(toItem);
    return this;
  }

   /**
   * List of recipients (visible to others)
   * @return to
  **/
  @javax.annotation.Nonnull
  public List<String> getTo() {
    return to;
  }

  public void setTo(List<String> to) {
    this.to = to;
  }


  public TransactionalRecipient CC(List<String> CC) {
    this.CC = CC;
    return this;
  }

  public TransactionalRecipient addCCItem(String CCItem) {
    if (this.CC == null) {
      this.CC = new ArrayList<>();
    }
    this.CC.add(CCItem);
    return this;
  }

   /**
   * List of Carbon Copy recipients (visible to others)
   * @return CC
  **/
  @javax.annotation.Nullable
  public List<String> getCC() {
    return CC;
  }

  public void setCC(List<String> CC) {
    this.CC = CC;
  }


  public TransactionalRecipient BCC(List<String> BCC) {
    this.BCC = BCC;
    return this;
  }

  public TransactionalRecipient addBCCItem(String BCCItem) {
    if (this.BCC == null) {
      this.BCC = new ArrayList<>();
    }
    this.BCC.add(BCCItem);
    return this;
  }

   /**
   * List of Blind Carbon Copy recipients (hidden from other recipients)
   * @return BCC
  **/
  @javax.annotation.Nullable
  public List<String> getBCC() {
    return BCC;
  }

  public void setBCC(List<String> BCC) {
    this.BCC = BCC;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionalRecipient transactionalRecipient = (TransactionalRecipient) o;
    return Objects.equals(this.to, transactionalRecipient.to) &&
        Objects.equals(this.CC, transactionalRecipient.CC) &&
        Objects.equals(this.BCC, transactionalRecipient.BCC);
  }

  @Override
  public int hashCode() {
    return Objects.hash(to, CC, BCC);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionalRecipient {\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    CC: ").append(toIndentedString(CC)).append("\n");
    sb.append("    BCC: ").append(toIndentedString(BCC)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("To");
    openapiFields.add("CC");
    openapiFields.add("BCC");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("To");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to TransactionalRecipient
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionalRecipient.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionalRecipient is not found in the empty JSON string", TransactionalRecipient.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionalRecipient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionalRecipient` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionalRecipient.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("To") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("To").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `To` to be an array in the JSON string but got `%s`", jsonObj.get("To").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("CC") != null && !jsonObj.get("CC").isJsonNull() && !jsonObj.get("CC").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `CC` to be an array in the JSON string but got `%s`", jsonObj.get("CC").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("BCC") != null && !jsonObj.get("BCC").isJsonNull() && !jsonObj.get("BCC").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `BCC` to be an array in the JSON string but got `%s`", jsonObj.get("BCC").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionalRecipient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionalRecipient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionalRecipient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionalRecipient.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionalRecipient>() {
           @Override
           public void write(JsonWriter out, TransactionalRecipient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionalRecipient read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TransactionalRecipient given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TransactionalRecipient
  * @throws IOException if the JSON string is invalid with respect to TransactionalRecipient
  */
  public static TransactionalRecipient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionalRecipient.class);
  }

 /**
  * Convert an instance of TransactionalRecipient to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

