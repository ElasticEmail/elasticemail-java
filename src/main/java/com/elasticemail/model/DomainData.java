/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.model;

import java.util.Objects;
import com.elasticemail.model.CertificateValidationStatus;
import com.elasticemail.model.DomainOwner;
import com.elasticemail.model.TrackingType;
import com.elasticemail.model.TrackingValidationStatus;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.elasticemail.client.JSON;

/**
 * Domain data, with information about domain records.
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2025-05-22T13:34:56.566653Z[Etc/UTC]", comments = "Generator version: 7.5.0")
public class DomainData {
  public static final String SERIALIZED_NAME_VALIDATION_LOG = "ValidationLog";
  @SerializedName(SERIALIZED_NAME_VALIDATION_LOG)
  private String validationLog;

  public static final String SERIALIZED_NAME_DOMAIN = "Domain";
  @SerializedName(SERIALIZED_NAME_DOMAIN)
  private String domain;

  public static final String SERIALIZED_NAME_DEFAULT_DOMAIN = "DefaultDomain";
  @SerializedName(SERIALIZED_NAME_DEFAULT_DOMAIN)
  private Boolean defaultDomain;

  public static final String SERIALIZED_NAME_SPF = "Spf";
  @SerializedName(SERIALIZED_NAME_SPF)
  private Boolean spf;

  public static final String SERIALIZED_NAME_DKIM = "Dkim";
  @SerializedName(SERIALIZED_NAME_DKIM)
  private Boolean dkim;

  public static final String SERIALIZED_NAME_M_X = "MX";
  @SerializedName(SERIALIZED_NAME_M_X)
  private Boolean MX;

  public static final String SERIALIZED_NAME_D_M_A_R_C = "DMARC";
  @SerializedName(SERIALIZED_NAME_D_M_A_R_C)
  private Boolean DMARC;

  public static final String SERIALIZED_NAME_IS_REWRITE_DOMAIN_VALID = "IsRewriteDomainValid";
  @SerializedName(SERIALIZED_NAME_IS_REWRITE_DOMAIN_VALID)
  private Boolean isRewriteDomainValid;

  public static final String SERIALIZED_NAME_VERIFY = "Verify";
  @SerializedName(SERIALIZED_NAME_VERIFY)
  private Boolean verify;

  public static final String SERIALIZED_NAME_TYPE = "Type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TrackingType type = TrackingType.NONE;

  public static final String SERIALIZED_NAME_TRACKING_STATUS = "TrackingStatus";
  @SerializedName(SERIALIZED_NAME_TRACKING_STATUS)
  private TrackingValidationStatus trackingStatus = TrackingValidationStatus.VALIDATED;

  public static final String SERIALIZED_NAME_CERTIFICATE_STATUS = "CertificateStatus";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_STATUS)
  private CertificateValidationStatus certificateStatus = CertificateValidationStatus.ERROROCCURED;

  public static final String SERIALIZED_NAME_CERTIFICATE_VALIDATION_ERROR = "CertificateValidationError";
  @SerializedName(SERIALIZED_NAME_CERTIFICATE_VALIDATION_ERROR)
  private String certificateValidationError;

  public static final String SERIALIZED_NAME_TRACKING_TYPE_USER_REQUEST = "TrackingTypeUserRequest";
  @SerializedName(SERIALIZED_NAME_TRACKING_TYPE_USER_REQUEST)
  private TrackingType trackingTypeUserRequest = TrackingType.NONE;

  public static final String SERIALIZED_NAME_V_E_R_P = "VERP";
  @SerializedName(SERIALIZED_NAME_V_E_R_P)
  private Boolean VERP;

  public static final String SERIALIZED_NAME_CUSTOM_BOUNCES_DOMAIN = "CustomBouncesDomain";
  @SerializedName(SERIALIZED_NAME_CUSTOM_BOUNCES_DOMAIN)
  private String customBouncesDomain;

  public static final String SERIALIZED_NAME_IS_CUSTOM_BOUNCES_DOMAIN_DEFAULT = "IsCustomBouncesDomainDefault";
  @SerializedName(SERIALIZED_NAME_IS_CUSTOM_BOUNCES_DOMAIN_DEFAULT)
  private Boolean isCustomBouncesDomainDefault;

  public static final String SERIALIZED_NAME_IS_MARKED_FOR_DELETION = "IsMarkedForDeletion";
  @SerializedName(SERIALIZED_NAME_IS_MARKED_FOR_DELETION)
  private Boolean isMarkedForDeletion;

  public static final String SERIALIZED_NAME_OWNERSHIP = "Ownership";
  @SerializedName(SERIALIZED_NAME_OWNERSHIP)
  private DomainOwner ownership = DomainOwner.CURRENT;

  public DomainData() {
  }

  public DomainData validationLog(String validationLog) {
    this.validationLog = validationLog;
    return this;
  }

   /**
   * Domain validation results - when domain has been running through validation process
   * @return validationLog
  **/
  @javax.annotation.Nullable
  public String getValidationLog() {
    return validationLog;
  }

  public void setValidationLog(String validationLog) {
    this.validationLog = validationLog;
  }


  public DomainData domain(String domain) {
    this.domain = domain;
    return this;
  }

   /**
   * Name of selected domain.
   * @return domain
  **/
  @javax.annotation.Nullable
  public String getDomain() {
    return domain;
  }

  public void setDomain(String domain) {
    this.domain = domain;
  }


  public DomainData defaultDomain(Boolean defaultDomain) {
    this.defaultDomain = defaultDomain;
    return this;
  }

   /**
   * True, if domain is used as default. Otherwise, false,
   * @return defaultDomain
  **/
  @javax.annotation.Nullable
  public Boolean getDefaultDomain() {
    return defaultDomain;
  }

  public void setDefaultDomain(Boolean defaultDomain) {
    this.defaultDomain = defaultDomain;
  }


  public DomainData spf(Boolean spf) {
    this.spf = spf;
    return this;
  }

   /**
   * True, if SPF record is verified
   * @return spf
  **/
  @javax.annotation.Nullable
  public Boolean getSpf() {
    return spf;
  }

  public void setSpf(Boolean spf) {
    this.spf = spf;
  }


  public DomainData dkim(Boolean dkim) {
    this.dkim = dkim;
    return this;
  }

   /**
   * True, if DKIM record is verified
   * @return dkim
  **/
  @javax.annotation.Nullable
  public Boolean getDkim() {
    return dkim;
  }

  public void setDkim(Boolean dkim) {
    this.dkim = dkim;
  }


  public DomainData MX(Boolean MX) {
    this.MX = MX;
    return this;
  }

   /**
   * True, if MX record is verified
   * @return MX
  **/
  @javax.annotation.Nullable
  public Boolean getMX() {
    return MX;
  }

  public void setMX(Boolean MX) {
    this.MX = MX;
  }


  public DomainData DMARC(Boolean DMARC) {
    this.DMARC = DMARC;
    return this;
  }

   /**
   * Get DMARC
   * @return DMARC
  **/
  @javax.annotation.Nullable
  public Boolean getDMARC() {
    return DMARC;
  }

  public void setDMARC(Boolean DMARC) {
    this.DMARC = DMARC;
  }


  public DomainData isRewriteDomainValid(Boolean isRewriteDomainValid) {
    this.isRewriteDomainValid = isRewriteDomainValid;
    return this;
  }

   /**
   * True, if tracking CNAME record is verified
   * @return isRewriteDomainValid
  **/
  @javax.annotation.Nullable
  public Boolean getIsRewriteDomainValid() {
    return isRewriteDomainValid;
  }

  public void setIsRewriteDomainValid(Boolean isRewriteDomainValid) {
    this.isRewriteDomainValid = isRewriteDomainValid;
  }


  public DomainData verify(Boolean verify) {
    this.verify = verify;
    return this;
  }

   /**
   * True, if DKIM, SPF, or tracking are still to be verified
   * @return verify
  **/
  @javax.annotation.Nullable
  public Boolean getVerify() {
    return verify;
  }

  public void setVerify(Boolean verify) {
    this.verify = verify;
  }


  public DomainData type(TrackingType type) {
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  public TrackingType getType() {
    return type;
  }

  public void setType(TrackingType type) {
    this.type = type;
  }


  public DomainData trackingStatus(TrackingValidationStatus trackingStatus) {
    this.trackingStatus = trackingStatus;
    return this;
  }

   /**
   * Get trackingStatus
   * @return trackingStatus
  **/
  @javax.annotation.Nullable
  public TrackingValidationStatus getTrackingStatus() {
    return trackingStatus;
  }

  public void setTrackingStatus(TrackingValidationStatus trackingStatus) {
    this.trackingStatus = trackingStatus;
  }


  public DomainData certificateStatus(CertificateValidationStatus certificateStatus) {
    this.certificateStatus = certificateStatus;
    return this;
  }

   /**
   * Get certificateStatus
   * @return certificateStatus
  **/
  @javax.annotation.Nullable
  public CertificateValidationStatus getCertificateStatus() {
    return certificateStatus;
  }

  public void setCertificateStatus(CertificateValidationStatus certificateStatus) {
    this.certificateStatus = certificateStatus;
  }


  public DomainData certificateValidationError(String certificateValidationError) {
    this.certificateValidationError = certificateValidationError;
    return this;
  }

   /**
   * Get certificateValidationError
   * @return certificateValidationError
  **/
  @javax.annotation.Nullable
  public String getCertificateValidationError() {
    return certificateValidationError;
  }

  public void setCertificateValidationError(String certificateValidationError) {
    this.certificateValidationError = certificateValidationError;
  }


  public DomainData trackingTypeUserRequest(TrackingType trackingTypeUserRequest) {
    this.trackingTypeUserRequest = trackingTypeUserRequest;
    return this;
  }

   /**
   * Get trackingTypeUserRequest
   * @return trackingTypeUserRequest
  **/
  @javax.annotation.Nullable
  public TrackingType getTrackingTypeUserRequest() {
    return trackingTypeUserRequest;
  }

  public void setTrackingTypeUserRequest(TrackingType trackingTypeUserRequest) {
    this.trackingTypeUserRequest = trackingTypeUserRequest;
  }


  public DomainData VERP(Boolean VERP) {
    this.VERP = VERP;
    return this;
  }

   /**
   * Get VERP
   * @return VERP
  **/
  @javax.annotation.Nullable
  public Boolean getVERP() {
    return VERP;
  }

  public void setVERP(Boolean VERP) {
    this.VERP = VERP;
  }


  public DomainData customBouncesDomain(String customBouncesDomain) {
    this.customBouncesDomain = customBouncesDomain;
    return this;
  }

   /**
   * Get customBouncesDomain
   * @return customBouncesDomain
  **/
  @javax.annotation.Nullable
  public String getCustomBouncesDomain() {
    return customBouncesDomain;
  }

  public void setCustomBouncesDomain(String customBouncesDomain) {
    this.customBouncesDomain = customBouncesDomain;
  }


  public DomainData isCustomBouncesDomainDefault(Boolean isCustomBouncesDomainDefault) {
    this.isCustomBouncesDomainDefault = isCustomBouncesDomainDefault;
    return this;
  }

   /**
   * Get isCustomBouncesDomainDefault
   * @return isCustomBouncesDomainDefault
  **/
  @javax.annotation.Nullable
  public Boolean getIsCustomBouncesDomainDefault() {
    return isCustomBouncesDomainDefault;
  }

  public void setIsCustomBouncesDomainDefault(Boolean isCustomBouncesDomainDefault) {
    this.isCustomBouncesDomainDefault = isCustomBouncesDomainDefault;
  }


  public DomainData isMarkedForDeletion(Boolean isMarkedForDeletion) {
    this.isMarkedForDeletion = isMarkedForDeletion;
    return this;
  }

   /**
   * Get isMarkedForDeletion
   * @return isMarkedForDeletion
  **/
  @javax.annotation.Nullable
  public Boolean getIsMarkedForDeletion() {
    return isMarkedForDeletion;
  }

  public void setIsMarkedForDeletion(Boolean isMarkedForDeletion) {
    this.isMarkedForDeletion = isMarkedForDeletion;
  }


  public DomainData ownership(DomainOwner ownership) {
    this.ownership = ownership;
    return this;
  }

   /**
   * Get ownership
   * @return ownership
  **/
  @javax.annotation.Nullable
  public DomainOwner getOwnership() {
    return ownership;
  }

  public void setOwnership(DomainOwner ownership) {
    this.ownership = ownership;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DomainData domainData = (DomainData) o;
    return Objects.equals(this.validationLog, domainData.validationLog) &&
        Objects.equals(this.domain, domainData.domain) &&
        Objects.equals(this.defaultDomain, domainData.defaultDomain) &&
        Objects.equals(this.spf, domainData.spf) &&
        Objects.equals(this.dkim, domainData.dkim) &&
        Objects.equals(this.MX, domainData.MX) &&
        Objects.equals(this.DMARC, domainData.DMARC) &&
        Objects.equals(this.isRewriteDomainValid, domainData.isRewriteDomainValid) &&
        Objects.equals(this.verify, domainData.verify) &&
        Objects.equals(this.type, domainData.type) &&
        Objects.equals(this.trackingStatus, domainData.trackingStatus) &&
        Objects.equals(this.certificateStatus, domainData.certificateStatus) &&
        Objects.equals(this.certificateValidationError, domainData.certificateValidationError) &&
        Objects.equals(this.trackingTypeUserRequest, domainData.trackingTypeUserRequest) &&
        Objects.equals(this.VERP, domainData.VERP) &&
        Objects.equals(this.customBouncesDomain, domainData.customBouncesDomain) &&
        Objects.equals(this.isCustomBouncesDomainDefault, domainData.isCustomBouncesDomainDefault) &&
        Objects.equals(this.isMarkedForDeletion, domainData.isMarkedForDeletion) &&
        Objects.equals(this.ownership, domainData.ownership);
  }

  @Override
  public int hashCode() {
    return Objects.hash(validationLog, domain, defaultDomain, spf, dkim, MX, DMARC, isRewriteDomainValid, verify, type, trackingStatus, certificateStatus, certificateValidationError, trackingTypeUserRequest, VERP, customBouncesDomain, isCustomBouncesDomainDefault, isMarkedForDeletion, ownership);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DomainData {\n");
    sb.append("    validationLog: ").append(toIndentedString(validationLog)).append("\n");
    sb.append("    domain: ").append(toIndentedString(domain)).append("\n");
    sb.append("    defaultDomain: ").append(toIndentedString(defaultDomain)).append("\n");
    sb.append("    spf: ").append(toIndentedString(spf)).append("\n");
    sb.append("    dkim: ").append(toIndentedString(dkim)).append("\n");
    sb.append("    MX: ").append(toIndentedString(MX)).append("\n");
    sb.append("    DMARC: ").append(toIndentedString(DMARC)).append("\n");
    sb.append("    isRewriteDomainValid: ").append(toIndentedString(isRewriteDomainValid)).append("\n");
    sb.append("    verify: ").append(toIndentedString(verify)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    trackingStatus: ").append(toIndentedString(trackingStatus)).append("\n");
    sb.append("    certificateStatus: ").append(toIndentedString(certificateStatus)).append("\n");
    sb.append("    certificateValidationError: ").append(toIndentedString(certificateValidationError)).append("\n");
    sb.append("    trackingTypeUserRequest: ").append(toIndentedString(trackingTypeUserRequest)).append("\n");
    sb.append("    VERP: ").append(toIndentedString(VERP)).append("\n");
    sb.append("    customBouncesDomain: ").append(toIndentedString(customBouncesDomain)).append("\n");
    sb.append("    isCustomBouncesDomainDefault: ").append(toIndentedString(isCustomBouncesDomainDefault)).append("\n");
    sb.append("    isMarkedForDeletion: ").append(toIndentedString(isMarkedForDeletion)).append("\n");
    sb.append("    ownership: ").append(toIndentedString(ownership)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("ValidationLog");
    openapiFields.add("Domain");
    openapiFields.add("DefaultDomain");
    openapiFields.add("Spf");
    openapiFields.add("Dkim");
    openapiFields.add("MX");
    openapiFields.add("DMARC");
    openapiFields.add("IsRewriteDomainValid");
    openapiFields.add("Verify");
    openapiFields.add("Type");
    openapiFields.add("TrackingStatus");
    openapiFields.add("CertificateStatus");
    openapiFields.add("CertificateValidationError");
    openapiFields.add("TrackingTypeUserRequest");
    openapiFields.add("VERP");
    openapiFields.add("CustomBouncesDomain");
    openapiFields.add("IsCustomBouncesDomainDefault");
    openapiFields.add("IsMarkedForDeletion");
    openapiFields.add("Ownership");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to DomainData
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DomainData.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DomainData is not found in the empty JSON string", DomainData.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DomainData.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DomainData` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("ValidationLog") != null && !jsonObj.get("ValidationLog").isJsonNull()) && !jsonObj.get("ValidationLog").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ValidationLog` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ValidationLog").toString()));
      }
      if ((jsonObj.get("Domain") != null && !jsonObj.get("Domain").isJsonNull()) && !jsonObj.get("Domain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `Domain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("Domain").toString()));
      }
      // validate the optional field `Type`
      if (jsonObj.get("Type") != null && !jsonObj.get("Type").isJsonNull()) {
        TrackingType.validateJsonElement(jsonObj.get("Type"));
      }
      // validate the optional field `TrackingStatus`
      if (jsonObj.get("TrackingStatus") != null && !jsonObj.get("TrackingStatus").isJsonNull()) {
        TrackingValidationStatus.validateJsonElement(jsonObj.get("TrackingStatus"));
      }
      // validate the optional field `CertificateStatus`
      if (jsonObj.get("CertificateStatus") != null && !jsonObj.get("CertificateStatus").isJsonNull()) {
        CertificateValidationStatus.validateJsonElement(jsonObj.get("CertificateStatus"));
      }
      if ((jsonObj.get("CertificateValidationError") != null && !jsonObj.get("CertificateValidationError").isJsonNull()) && !jsonObj.get("CertificateValidationError").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CertificateValidationError` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CertificateValidationError").toString()));
      }
      // validate the optional field `TrackingTypeUserRequest`
      if (jsonObj.get("TrackingTypeUserRequest") != null && !jsonObj.get("TrackingTypeUserRequest").isJsonNull()) {
        TrackingType.validateJsonElement(jsonObj.get("TrackingTypeUserRequest"));
      }
      if ((jsonObj.get("CustomBouncesDomain") != null && !jsonObj.get("CustomBouncesDomain").isJsonNull()) && !jsonObj.get("CustomBouncesDomain").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CustomBouncesDomain` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CustomBouncesDomain").toString()));
      }
      // validate the optional field `Ownership`
      if (jsonObj.get("Ownership") != null && !jsonObj.get("Ownership").isJsonNull()) {
        DomainOwner.validateJsonElement(jsonObj.get("Ownership"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DomainData.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DomainData' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DomainData> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DomainData.class));

       return (TypeAdapter<T>) new TypeAdapter<DomainData>() {
           @Override
           public void write(JsonWriter out, DomainData value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DomainData read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DomainData given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DomainData
  * @throws IOException if the JSON string is invalid with respect to DomainData
  */
  public static DomainData fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DomainData.class);
  }

 /**
  * Convert an instance of DomainData to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

