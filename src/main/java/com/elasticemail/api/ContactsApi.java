/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    To start using this API, you will need your Access Token (available <a href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a href=\"https://api.elasticemail.com/public/help\">here</a>.
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.api;

import com.elasticemail.client.ApiCallback;
import com.elasticemail.client.ApiClient;
import com.elasticemail.client.ApiException;
import com.elasticemail.client.ApiResponse;
import com.elasticemail.client.Configuration;
import com.elasticemail.client.Pair;
import com.elasticemail.client.ProgressRequestBody;
import com.elasticemail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.elasticemail.model.CompressionFormat;
import com.elasticemail.model.Contact;
import com.elasticemail.model.ContactHistory;
import com.elasticemail.model.ContactPayload;
import com.elasticemail.model.ContactUpdatePayload;
import com.elasticemail.model.EmailsPayload;
import com.elasticemail.model.ExportFileFormats;
import com.elasticemail.model.ExportLink;
import com.elasticemail.model.ExportStatus;
import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ContactsApi {
    private ApiClient localVarApiClient;

    public ContactsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ContactsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for contactsByEmailDelete
     * @param email Proper email address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailDeleteCall(String email, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsByEmailDeleteValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling contactsByEmailDelete(Async)");
        }
        

        okhttp3.Call localVarCall = contactsByEmailDeleteCall(email, _callback);
        return localVarCall;

    }

    /**
     * Delete Contact
     * Deletes the provided contact. Required Access Level: ModifyContacts
     * @param email Proper email address. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void contactsByEmailDelete(String email) throws ApiException {
        contactsByEmailDeleteWithHttpInfo(email);
    }

    /**
     * Delete Contact
     * Deletes the provided contact. Required Access Level: ModifyContacts
     * @param email Proper email address. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contactsByEmailDeleteWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = contactsByEmailDeleteValidateBeforeCall(email, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Contact (asynchronously)
     * Deletes the provided contact. Required Access Level: ModifyContacts
     * @param email Proper email address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailDeleteAsync(String email, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsByEmailDeleteValidateBeforeCall(email, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsByEmailGet
     * @param email Proper email address. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailGetCall(String email, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsByEmailGetValidateBeforeCall(String email, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling contactsByEmailGet(Async)");
        }
        

        okhttp3.Call localVarCall = contactsByEmailGetCall(email, _callback);
        return localVarCall;

    }

    /**
     * Load Contact
     * Load detailed contact information for specified email. Required Access Level: ViewContacts
     * @param email Proper email address. (required)
     * @return Contact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Contact contactsByEmailGet(String email) throws ApiException {
        ApiResponse<Contact> localVarResp = contactsByEmailGetWithHttpInfo(email);
        return localVarResp.getData();
    }

    /**
     * Load Contact
     * Load detailed contact information for specified email. Required Access Level: ViewContacts
     * @param email Proper email address. (required)
     * @return ApiResponse&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contact> contactsByEmailGetWithHttpInfo(String email) throws ApiException {
        okhttp3.Call localVarCall = contactsByEmailGetValidateBeforeCall(email, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load Contact (asynchronously)
     * Load detailed contact information for specified email. Required Access Level: ViewContacts
     * @param email Proper email address. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailGetAsync(String email, final ApiCallback<Contact> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsByEmailGetValidateBeforeCall(email, _callback);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsByEmailHistoryGet
     * @param email Proper email address. (required)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailHistoryGetCall(String email, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/{email}/history"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsByEmailHistoryGetValidateBeforeCall(String email, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling contactsByEmailHistoryGet(Async)");
        }
        

        okhttp3.Call localVarCall = contactsByEmailHistoryGetCall(email, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Load History
     * Returns detailed history of specified Contact. Required Access Level: ViewContacts
     * @param email Proper email address. (required)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return List&lt;ContactHistory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ContactHistory> contactsByEmailHistoryGet(String email, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<ContactHistory>> localVarResp = contactsByEmailHistoryGetWithHttpInfo(email, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Load History
     * Returns detailed history of specified Contact. Required Access Level: ViewContacts
     * @param email Proper email address. (required)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return ApiResponse&lt;List&lt;ContactHistory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ContactHistory>> contactsByEmailHistoryGetWithHttpInfo(String email, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = contactsByEmailHistoryGetValidateBeforeCall(email, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<ContactHistory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load History (asynchronously)
     * Returns detailed history of specified Contact. Required Access Level: ViewContacts
     * @param email Proper email address. (required)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailHistoryGetAsync(String email, Integer limit, Integer offset, final ApiCallback<List<ContactHistory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsByEmailHistoryGetValidateBeforeCall(email, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<ContactHistory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsByEmailPut
     * @param email Proper email address. (required)
     * @param contactUpdatePayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailPutCall(String email, ContactUpdatePayload contactUpdatePayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = contactUpdatePayload;

        // create path and map variables
        String localVarPath = "/contacts/{email}"
            .replaceAll("\\{" + "email" + "\\}", localVarApiClient.escapeString(email.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsByEmailPutValidateBeforeCall(String email, ContactUpdatePayload contactUpdatePayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'email' is set
        if (email == null) {
            throw new ApiException("Missing the required parameter 'email' when calling contactsByEmailPut(Async)");
        }
        
        // verify the required parameter 'contactUpdatePayload' is set
        if (contactUpdatePayload == null) {
            throw new ApiException("Missing the required parameter 'contactUpdatePayload' when calling contactsByEmailPut(Async)");
        }
        

        okhttp3.Call localVarCall = contactsByEmailPutCall(email, contactUpdatePayload, _callback);
        return localVarCall;

    }

    /**
     * Update Contact
     * Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
     * @param email Proper email address. (required)
     * @param contactUpdatePayload  (required)
     * @return Contact
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Contact contactsByEmailPut(String email, ContactUpdatePayload contactUpdatePayload) throws ApiException {
        ApiResponse<Contact> localVarResp = contactsByEmailPutWithHttpInfo(email, contactUpdatePayload);
        return localVarResp.getData();
    }

    /**
     * Update Contact
     * Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
     * @param email Proper email address. (required)
     * @param contactUpdatePayload  (required)
     * @return ApiResponse&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Contact> contactsByEmailPutWithHttpInfo(String email, ContactUpdatePayload contactUpdatePayload) throws ApiException {
        okhttp3.Call localVarCall = contactsByEmailPutValidateBeforeCall(email, contactUpdatePayload, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Contact (asynchronously)
     * Update selected contact. Omitted contact&#39;s fields will not be changed. Required Access Level: ModifyContacts
     * @param email Proper email address. (required)
     * @param contactUpdatePayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsByEmailPutAsync(String email, ContactUpdatePayload contactUpdatePayload, final ApiCallback<Contact> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsByEmailPutValidateBeforeCall(email, contactUpdatePayload, _callback);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsDeletePost
     * @param emailsPayload Provide either rule or a list of emails, not both. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsDeletePostCall(EmailsPayload emailsPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = emailsPayload;

        // create path and map variables
        String localVarPath = "/contacts/delete";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsDeletePostValidateBeforeCall(EmailsPayload emailsPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'emailsPayload' is set
        if (emailsPayload == null) {
            throw new ApiException("Missing the required parameter 'emailsPayload' when calling contactsDeletePost(Async)");
        }
        

        okhttp3.Call localVarCall = contactsDeletePostCall(emailsPayload, _callback);
        return localVarCall;

    }

    /**
     * Delete Contacts Bulk
     * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
     * @param emailsPayload Provide either rule or a list of emails, not both. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void contactsDeletePost(EmailsPayload emailsPayload) throws ApiException {
        contactsDeletePostWithHttpInfo(emailsPayload);
    }

    /**
     * Delete Contacts Bulk
     * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
     * @param emailsPayload Provide either rule or a list of emails, not both. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contactsDeletePostWithHttpInfo(EmailsPayload emailsPayload) throws ApiException {
        okhttp3.Call localVarCall = contactsDeletePostValidateBeforeCall(emailsPayload, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Contacts Bulk (asynchronously)
     * Deletes provided contacts in bulk. Required Access Level: ModifyContacts
     * @param emailsPayload Provide either rule or a list of emails, not both. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsDeletePostAsync(EmailsPayload emailsPayload, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsDeletePostValidateBeforeCall(emailsPayload, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsExportByIdStatusGet
     * @param id ID of the exported file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsExportByIdStatusGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/export/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsExportByIdStatusGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling contactsExportByIdStatusGet(Async)");
        }
        

        okhttp3.Call localVarCall = contactsExportByIdStatusGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Check Export Status
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @return ExportStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExportStatus contactsExportByIdStatusGet(String id) throws ApiException {
        ApiResponse<ExportStatus> localVarResp = contactsExportByIdStatusGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Check Export Status
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @return ApiResponse&lt;ExportStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportStatus> contactsExportByIdStatusGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = contactsExportByIdStatusGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExportStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Export Status (asynchronously)
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsExportByIdStatusGetAsync(String id, final ApiCallback<ExportStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsExportByIdStatusGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExportStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsExportPost
     * @param fileFormat Format of the exported file (optional, default to null)
     * @param rule Query used for filtering. (optional)
     * @param emails Comma delimited list of contact emails (optional)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to null)
     * @param fileName Name of your file including extension. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsExportPostCall(ExportFileFormats fileFormat, String rule, List<String> emails, CompressionFormat compressionFormat, String fileName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileFormat", fileFormat));
        }

        if (rule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("rule", rule));
        }

        if (emails != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "emails", emails));
        }

        if (compressionFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compressionFormat", compressionFormat));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileName", fileName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsExportPostValidateBeforeCall(ExportFileFormats fileFormat, String rule, List<String> emails, CompressionFormat compressionFormat, String fileName, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = contactsExportPostCall(fileFormat, rule, emails, compressionFormat, fileName, _callback);
        return localVarCall;

    }

    /**
     * Export Contacts
     * Request an Export of specified Contacts. Required Access Level: Export
     * @param fileFormat Format of the exported file (optional, default to null)
     * @param rule Query used for filtering. (optional)
     * @param emails Comma delimited list of contact emails (optional)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to null)
     * @param fileName Name of your file including extension. (optional)
     * @return ExportLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ExportLink contactsExportPost(ExportFileFormats fileFormat, String rule, List<String> emails, CompressionFormat compressionFormat, String fileName) throws ApiException {
        ApiResponse<ExportLink> localVarResp = contactsExportPostWithHttpInfo(fileFormat, rule, emails, compressionFormat, fileName);
        return localVarResp.getData();
    }

    /**
     * Export Contacts
     * Request an Export of specified Contacts. Required Access Level: Export
     * @param fileFormat Format of the exported file (optional, default to null)
     * @param rule Query used for filtering. (optional)
     * @param emails Comma delimited list of contact emails (optional)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to null)
     * @param fileName Name of your file including extension. (optional)
     * @return ApiResponse&lt;ExportLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportLink> contactsExportPostWithHttpInfo(ExportFileFormats fileFormat, String rule, List<String> emails, CompressionFormat compressionFormat, String fileName) throws ApiException {
        okhttp3.Call localVarCall = contactsExportPostValidateBeforeCall(fileFormat, rule, emails, compressionFormat, fileName, null);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Contacts (asynchronously)
     * Request an Export of specified Contacts. Required Access Level: Export
     * @param fileFormat Format of the exported file (optional, default to null)
     * @param rule Query used for filtering. (optional)
     * @param emails Comma delimited list of contact emails (optional)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to null)
     * @param fileName Name of your file including extension. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsExportPostAsync(ExportFileFormats fileFormat, String rule, List<String> emails, CompressionFormat compressionFormat, String fileName, final ApiCallback<ExportLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsExportPostValidateBeforeCall(fileFormat, rule, emails, compressionFormat, fileName, _callback);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsGet
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsGetValidateBeforeCall(Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = contactsGetCall(limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Load Contacts
     * Returns a list of contacts. Required Access Level: ViewContacts
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return List&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Contact> contactsGet(Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<Contact>> localVarResp = contactsGetWithHttpInfo(limit, offset);
        return localVarResp.getData();
    }

    /**
     * Load Contacts
     * Returns a list of contacts. Required Access Level: ViewContacts
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return ApiResponse&lt;List&lt;Contact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Contact>> contactsGetWithHttpInfo(Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = contactsGetValidateBeforeCall(limit, offset, null);
        Type localVarReturnType = new TypeToken<List<Contact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load Contacts (asynchronously)
     * Returns a list of contacts. Required Access Level: ViewContacts
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsGetAsync(Integer limit, Integer offset, final ApiCallback<List<Contact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsGetValidateBeforeCall(limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<Contact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsImportPost
     * @param listName Name of an existing list to add these contacts to (optional)
     * @param encodingName In what encoding the file is uploaded (optional)
     * @param file  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsImportPostCall(String listName, String encodingName, File file, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/contacts/import";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (file != null) {
            localVarFormParams.put("file", file);
        }

        if (listName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("listName", listName));
        }

        if (encodingName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("encodingName", encodingName));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsImportPostValidateBeforeCall(String listName, String encodingName, File file, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = contactsImportPostCall(listName, encodingName, file, _callback);
        return localVarCall;

    }

    /**
     * Upload Contacts
     * Upload contacts from a file. Required Access Level: ModifyContacts
     * @param listName Name of an existing list to add these contacts to (optional)
     * @param encodingName In what encoding the file is uploaded (optional)
     * @param file  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public void contactsImportPost(String listName, String encodingName, File file) throws ApiException {
        contactsImportPostWithHttpInfo(listName, encodingName, file);
    }

    /**
     * Upload Contacts
     * Upload contacts from a file. Required Access Level: ModifyContacts
     * @param listName Name of an existing list to add these contacts to (optional)
     * @param encodingName In what encoding the file is uploaded (optional)
     * @param file  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> contactsImportPostWithHttpInfo(String listName, String encodingName, File file) throws ApiException {
        okhttp3.Call localVarCall = contactsImportPostValidateBeforeCall(listName, encodingName, file, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Upload Contacts (asynchronously)
     * Upload contacts from a file. Required Access Level: ModifyContacts
     * @param listName Name of an existing list to add these contacts to (optional)
     * @param encodingName In what encoding the file is uploaded (optional)
     * @param file  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsImportPostAsync(String listName, String encodingName, File file, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsImportPostValidateBeforeCall(listName, encodingName, file, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for contactsPost
     * @param contactPayload  (required)
     * @param listnames Names of lists to which the uploaded contacts should be added to (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsPostCall(List<ContactPayload> contactPayload, List<String> listnames, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = contactPayload;

        // create path and map variables
        String localVarPath = "/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (listnames != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "listnames", listnames));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call contactsPostValidateBeforeCall(List<ContactPayload> contactPayload, List<String> listnames, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'contactPayload' is set
        if (contactPayload == null) {
            throw new ApiException("Missing the required parameter 'contactPayload' when calling contactsPost(Async)");
        }
        

        okhttp3.Call localVarCall = contactsPostCall(contactPayload, listnames, _callback);
        return localVarCall;

    }

    /**
     * Add Contact
     * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
     * @param contactPayload  (required)
     * @param listnames Names of lists to which the uploaded contacts should be added to (optional)
     * @return List&lt;Contact&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Contact> contactsPost(List<ContactPayload> contactPayload, List<String> listnames) throws ApiException {
        ApiResponse<List<Contact>> localVarResp = contactsPostWithHttpInfo(contactPayload, listnames);
        return localVarResp.getData();
    }

    /**
     * Add Contact
     * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
     * @param contactPayload  (required)
     * @param listnames Names of lists to which the uploaded contacts should be added to (optional)
     * @return ApiResponse&lt;List&lt;Contact&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Contact>> contactsPostWithHttpInfo(List<ContactPayload> contactPayload, List<String> listnames) throws ApiException {
        okhttp3.Call localVarCall = contactsPostValidateBeforeCall(contactPayload, listnames, null);
        Type localVarReturnType = new TypeToken<List<Contact>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Contact (asynchronously)
     * Add new Contacts to your Lists. Up to 1000 can be added (for more please refer to the import request). Required Access Level: ModifyContacts
     * @param contactPayload  (required)
     * @param listnames Names of lists to which the uploaded contacts should be added to (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call contactsPostAsync(List<ContactPayload> contactPayload, List<String> listnames, final ApiCallback<List<Contact>> _callback) throws ApiException {

        okhttp3.Call localVarCall = contactsPostValidateBeforeCall(contactPayload, listnames, _callback);
        Type localVarReturnType = new TypeToken<List<Contact>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
