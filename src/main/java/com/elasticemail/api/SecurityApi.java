/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.api;

import com.elasticemail.client.ApiCallback;
import com.elasticemail.client.ApiClient;
import com.elasticemail.client.ApiException;
import com.elasticemail.client.ApiResponse;
import com.elasticemail.client.Configuration;
import com.elasticemail.client.Pair;
import com.elasticemail.client.ProgressRequestBody;
import com.elasticemail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.elasticemail.model.ApiKey;
import com.elasticemail.model.ApiKeyPayload;
import com.elasticemail.model.NewApiKey;
import com.elasticemail.model.NewSmtpCredentials;
import com.elasticemail.model.SmtpCredentials;
import com.elasticemail.model.SmtpCredentialsPayload;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SecurityApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SecurityApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SecurityApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for securityApikeysByNameDelete
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysByNameDeleteCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/apikeys/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subaccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subaccount", subaccount));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityApikeysByNameDeleteValidateBeforeCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling securityApikeysByNameDelete(Async)");
        }
        

        okhttp3.Call localVarCall = securityApikeysByNameDeleteCall(name, subaccount, _callback);
        return localVarCall;

    }

    /**
     * Delete ApiKey
     * Delete your existing ApiKey. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void securityApikeysByNameDelete(String name, String subaccount) throws ApiException {
        securityApikeysByNameDeleteWithHttpInfo(name, subaccount);
    }

    /**
     * Delete ApiKey
     * Delete your existing ApiKey. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securityApikeysByNameDeleteWithHttpInfo(String name, String subaccount) throws ApiException {
        okhttp3.Call localVarCall = securityApikeysByNameDeleteValidateBeforeCall(name, subaccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete ApiKey (asynchronously)
     * Delete your existing ApiKey. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be deleted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysByNameDeleteAsync(String name, String subaccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityApikeysByNameDeleteValidateBeforeCall(name, subaccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityApikeysByNameGet
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysByNameGetCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/apikeys/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subaccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subaccount", subaccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityApikeysByNameGetValidateBeforeCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling securityApikeysByNameGet(Async)");
        }
        

        okhttp3.Call localVarCall = securityApikeysByNameGetCall(name, subaccount, _callback);
        return localVarCall;

    }

    /**
     * Load ApiKey
     * Load your existing ApiKey info. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey securityApikeysByNameGet(String name, String subaccount) throws ApiException {
        ApiResponse<ApiKey> localVarResp = securityApikeysByNameGetWithHttpInfo(name, subaccount);
        return localVarResp.getData();
    }

    /**
     * Load ApiKey
     * Load your existing ApiKey info. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> securityApikeysByNameGetWithHttpInfo(String name, String subaccount) throws ApiException {
        okhttp3.Call localVarCall = securityApikeysByNameGetValidateBeforeCall(name, subaccount, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load ApiKey (asynchronously)
     * Load your existing ApiKey info. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param subaccount Email of the subaccount of which ApiKey should be loaded (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysByNameGetAsync(String name, String subaccount, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityApikeysByNameGetValidateBeforeCall(name, subaccount, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityApikeysByNamePut
     * @param name Name of the ApiKey (required)
     * @param apiKeyPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysByNamePutCall(String name, ApiKeyPayload apiKeyPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiKeyPayload;

        // create path and map variables
        String localVarPath = "/security/apikeys/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityApikeysByNamePutValidateBeforeCall(String name, ApiKeyPayload apiKeyPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling securityApikeysByNamePut(Async)");
        }
        
        // verify the required parameter 'apiKeyPayload' is set
        if (apiKeyPayload == null) {
            throw new ApiException("Missing the required parameter 'apiKeyPayload' when calling securityApikeysByNamePut(Async)");
        }
        

        okhttp3.Call localVarCall = securityApikeysByNamePutCall(name, apiKeyPayload, _callback);
        return localVarCall;

    }

    /**
     * Update ApiKey
     * Update your existing ApiKey. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param apiKeyPayload  (required)
     * @return ApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiKey securityApikeysByNamePut(String name, ApiKeyPayload apiKeyPayload) throws ApiException {
        ApiResponse<ApiKey> localVarResp = securityApikeysByNamePutWithHttpInfo(name, apiKeyPayload);
        return localVarResp.getData();
    }

    /**
     * Update ApiKey
     * Update your existing ApiKey. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param apiKeyPayload  (required)
     * @return ApiResponse&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ApiKey> securityApikeysByNamePutWithHttpInfo(String name, ApiKeyPayload apiKeyPayload) throws ApiException {
        okhttp3.Call localVarCall = securityApikeysByNamePutValidateBeforeCall(name, apiKeyPayload, null);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update ApiKey (asynchronously)
     * Update your existing ApiKey. Required Access Level: Security
     * @param name Name of the ApiKey (required)
     * @param apiKeyPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysByNamePutAsync(String name, ApiKeyPayload apiKeyPayload, final ApiCallback<ApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityApikeysByNamePutValidateBeforeCall(name, apiKeyPayload, _callback);
        Type localVarReturnType = new TypeToken<ApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityApikeysGet
     * @param subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysGetCall(String subaccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/apikeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subaccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subaccount", subaccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityApikeysGetValidateBeforeCall(String subaccount, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = securityApikeysGetCall(subaccount, _callback);
        return localVarCall;

    }

    /**
     * List ApiKeys
     * List all your existing ApiKeys. Required Access Level: Security
     * @param subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @return List&lt;ApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<ApiKey> securityApikeysGet(String subaccount) throws ApiException {
        ApiResponse<List<ApiKey>> localVarResp = securityApikeysGetWithHttpInfo(subaccount);
        return localVarResp.getData();
    }

    /**
     * List ApiKeys
     * List all your existing ApiKeys. Required Access Level: Security
     * @param subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @return ApiResponse&lt;List&lt;ApiKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ApiKey>> securityApikeysGetWithHttpInfo(String subaccount) throws ApiException {
        okhttp3.Call localVarCall = securityApikeysGetValidateBeforeCall(subaccount, null);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List ApiKeys (asynchronously)
     * List all your existing ApiKeys. Required Access Level: Security
     * @param subaccount Email of the subaccount of which ApiKeys should be loaded (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysGetAsync(String subaccount, final ApiCallback<List<ApiKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityApikeysGetValidateBeforeCall(subaccount, _callback);
        Type localVarReturnType = new TypeToken<List<ApiKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securityApikeysPost
     * @param apiKeyPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysPostCall(ApiKeyPayload apiKeyPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = apiKeyPayload;

        // create path and map variables
        String localVarPath = "/security/apikeys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securityApikeysPostValidateBeforeCall(ApiKeyPayload apiKeyPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'apiKeyPayload' is set
        if (apiKeyPayload == null) {
            throw new ApiException("Missing the required parameter 'apiKeyPayload' when calling securityApikeysPost(Async)");
        }
        

        okhttp3.Call localVarCall = securityApikeysPostCall(apiKeyPayload, _callback);
        return localVarCall;

    }

    /**
     * Add ApiKey
     * Add a new ApiKey. Required Access Level: Security
     * @param apiKeyPayload  (required)
     * @return NewApiKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public NewApiKey securityApikeysPost(ApiKeyPayload apiKeyPayload) throws ApiException {
        ApiResponse<NewApiKey> localVarResp = securityApikeysPostWithHttpInfo(apiKeyPayload);
        return localVarResp.getData();
    }

    /**
     * Add ApiKey
     * Add a new ApiKey. Required Access Level: Security
     * @param apiKeyPayload  (required)
     * @return ApiResponse&lt;NewApiKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewApiKey> securityApikeysPostWithHttpInfo(ApiKeyPayload apiKeyPayload) throws ApiException {
        okhttp3.Call localVarCall = securityApikeysPostValidateBeforeCall(apiKeyPayload, null);
        Type localVarReturnType = new TypeToken<NewApiKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add ApiKey (asynchronously)
     * Add a new ApiKey. Required Access Level: Security
     * @param apiKeyPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securityApikeysPostAsync(ApiKeyPayload apiKeyPayload, final ApiCallback<NewApiKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = securityApikeysPostValidateBeforeCall(apiKeyPayload, _callback);
        Type localVarReturnType = new TypeToken<NewApiKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securitySmtpByNameDelete
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be deleted (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpByNameDeleteCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/smtp/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subaccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subaccount", subaccount));
        }

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securitySmtpByNameDeleteValidateBeforeCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling securitySmtpByNameDelete(Async)");
        }
        

        okhttp3.Call localVarCall = securitySmtpByNameDeleteCall(name, subaccount, _callback);
        return localVarCall;

    }

    /**
     * Delete SMTP Credential
     * Delete your existing SMTP Credentials. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be deleted (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void securitySmtpByNameDelete(String name, String subaccount) throws ApiException {
        securitySmtpByNameDeleteWithHttpInfo(name, subaccount);
    }

    /**
     * Delete SMTP Credential
     * Delete your existing SMTP Credentials. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be deleted (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> securitySmtpByNameDeleteWithHttpInfo(String name, String subaccount) throws ApiException {
        okhttp3.Call localVarCall = securitySmtpByNameDeleteValidateBeforeCall(name, subaccount, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete SMTP Credential (asynchronously)
     * Delete your existing SMTP Credentials. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be deleted (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpByNameDeleteAsync(String name, String subaccount, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = securitySmtpByNameDeleteValidateBeforeCall(name, subaccount, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for securitySmtpByNameGet
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be loaded (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpByNameGetCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/smtp/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subaccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subaccount", subaccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securitySmtpByNameGetValidateBeforeCall(String name, String subaccount, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling securitySmtpByNameGet(Async)");
        }
        

        okhttp3.Call localVarCall = securitySmtpByNameGetCall(name, subaccount, _callback);
        return localVarCall;

    }

    /**
     * Load SMTP Credential
     * Load your existing SMTP Credential info. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be loaded (optional)
     * @return SmtpCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SmtpCredentials securitySmtpByNameGet(String name, String subaccount) throws ApiException {
        ApiResponse<SmtpCredentials> localVarResp = securitySmtpByNameGetWithHttpInfo(name, subaccount);
        return localVarResp.getData();
    }

    /**
     * Load SMTP Credential
     * Load your existing SMTP Credential info. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be loaded (optional)
     * @return ApiResponse&lt;SmtpCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmtpCredentials> securitySmtpByNameGetWithHttpInfo(String name, String subaccount) throws ApiException {
        okhttp3.Call localVarCall = securitySmtpByNameGetValidateBeforeCall(name, subaccount, null);
        Type localVarReturnType = new TypeToken<SmtpCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load SMTP Credential (asynchronously)
     * Load your existing SMTP Credential info. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param subaccount Email of the subaccount of which credential should be loaded (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpByNameGetAsync(String name, String subaccount, final ApiCallback<SmtpCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = securitySmtpByNameGetValidateBeforeCall(name, subaccount, _callback);
        Type localVarReturnType = new TypeToken<SmtpCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securitySmtpByNamePut
     * @param name Name of the SMTP Credential (required)
     * @param smtpCredentialsPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpByNamePutCall(String name, SmtpCredentialsPayload smtpCredentialsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smtpCredentialsPayload;

        // create path and map variables
        String localVarPath = "/security/smtp/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securitySmtpByNamePutValidateBeforeCall(String name, SmtpCredentialsPayload smtpCredentialsPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling securitySmtpByNamePut(Async)");
        }
        
        // verify the required parameter 'smtpCredentialsPayload' is set
        if (smtpCredentialsPayload == null) {
            throw new ApiException("Missing the required parameter 'smtpCredentialsPayload' when calling securitySmtpByNamePut(Async)");
        }
        

        okhttp3.Call localVarCall = securitySmtpByNamePutCall(name, smtpCredentialsPayload, _callback);
        return localVarCall;

    }

    /**
     * Update SMTP Credential
     * Update your existing SMTP Credentials. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param smtpCredentialsPayload  (required)
     * @return SmtpCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public SmtpCredentials securitySmtpByNamePut(String name, SmtpCredentialsPayload smtpCredentialsPayload) throws ApiException {
        ApiResponse<SmtpCredentials> localVarResp = securitySmtpByNamePutWithHttpInfo(name, smtpCredentialsPayload);
        return localVarResp.getData();
    }

    /**
     * Update SMTP Credential
     * Update your existing SMTP Credentials. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param smtpCredentialsPayload  (required)
     * @return ApiResponse&lt;SmtpCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SmtpCredentials> securitySmtpByNamePutWithHttpInfo(String name, SmtpCredentialsPayload smtpCredentialsPayload) throws ApiException {
        okhttp3.Call localVarCall = securitySmtpByNamePutValidateBeforeCall(name, smtpCredentialsPayload, null);
        Type localVarReturnType = new TypeToken<SmtpCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update SMTP Credential (asynchronously)
     * Update your existing SMTP Credentials. Required Access Level: Security
     * @param name Name of the SMTP Credential (required)
     * @param smtpCredentialsPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpByNamePutAsync(String name, SmtpCredentialsPayload smtpCredentialsPayload, final ApiCallback<SmtpCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = securitySmtpByNamePutValidateBeforeCall(name, smtpCredentialsPayload, _callback);
        Type localVarReturnType = new TypeToken<SmtpCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securitySmtpGet
     * @param subaccount Email of the subaccount of which credentials should be listed (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpGetCall(String subaccount, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/security/smtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subaccount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subaccount", subaccount));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securitySmtpGetValidateBeforeCall(String subaccount, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = securitySmtpGetCall(subaccount, _callback);
        return localVarCall;

    }

    /**
     * List SMTP Credentials
     * List all your existing SMTP Credentials. Required Access Level: Security
     * @param subaccount Email of the subaccount of which credentials should be listed (optional)
     * @return List&lt;SmtpCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<SmtpCredentials> securitySmtpGet(String subaccount) throws ApiException {
        ApiResponse<List<SmtpCredentials>> localVarResp = securitySmtpGetWithHttpInfo(subaccount);
        return localVarResp.getData();
    }

    /**
     * List SMTP Credentials
     * List all your existing SMTP Credentials. Required Access Level: Security
     * @param subaccount Email of the subaccount of which credentials should be listed (optional)
     * @return ApiResponse&lt;List&lt;SmtpCredentials&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<SmtpCredentials>> securitySmtpGetWithHttpInfo(String subaccount) throws ApiException {
        okhttp3.Call localVarCall = securitySmtpGetValidateBeforeCall(subaccount, null);
        Type localVarReturnType = new TypeToken<List<SmtpCredentials>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List SMTP Credentials (asynchronously)
     * List all your existing SMTP Credentials. Required Access Level: Security
     * @param subaccount Email of the subaccount of which credentials should be listed (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpGetAsync(String subaccount, final ApiCallback<List<SmtpCredentials>> _callback) throws ApiException {

        okhttp3.Call localVarCall = securitySmtpGetValidateBeforeCall(subaccount, _callback);
        Type localVarReturnType = new TypeToken<List<SmtpCredentials>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for securitySmtpPost
     * @param smtpCredentialsPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpPostCall(SmtpCredentialsPayload smtpCredentialsPayload, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = smtpCredentialsPayload;

        // create path and map variables
        String localVarPath = "/security/smtp";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call securitySmtpPostValidateBeforeCall(SmtpCredentialsPayload smtpCredentialsPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'smtpCredentialsPayload' is set
        if (smtpCredentialsPayload == null) {
            throw new ApiException("Missing the required parameter 'smtpCredentialsPayload' when calling securitySmtpPost(Async)");
        }
        

        okhttp3.Call localVarCall = securitySmtpPostCall(smtpCredentialsPayload, _callback);
        return localVarCall;

    }

    /**
     * Add SMTP Credential
     * Add new SMTP Credential. Required Access Level: Security
     * @param smtpCredentialsPayload  (required)
     * @return NewSmtpCredentials
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public NewSmtpCredentials securitySmtpPost(SmtpCredentialsPayload smtpCredentialsPayload) throws ApiException {
        ApiResponse<NewSmtpCredentials> localVarResp = securitySmtpPostWithHttpInfo(smtpCredentialsPayload);
        return localVarResp.getData();
    }

    /**
     * Add SMTP Credential
     * Add new SMTP Credential. Required Access Level: Security
     * @param smtpCredentialsPayload  (required)
     * @return ApiResponse&lt;NewSmtpCredentials&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<NewSmtpCredentials> securitySmtpPostWithHttpInfo(SmtpCredentialsPayload smtpCredentialsPayload) throws ApiException {
        okhttp3.Call localVarCall = securitySmtpPostValidateBeforeCall(smtpCredentialsPayload, null);
        Type localVarReturnType = new TypeToken<NewSmtpCredentials>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add SMTP Credential (asynchronously)
     * Add new SMTP Credential. Required Access Level: Security
     * @param smtpCredentialsPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call securitySmtpPostAsync(SmtpCredentialsPayload smtpCredentialsPayload, final ApiCallback<NewSmtpCredentials> _callback) throws ApiException {

        okhttp3.Call localVarCall = securitySmtpPostValidateBeforeCall(smtpCredentialsPayload, _callback);
        Type localVarReturnType = new TypeToken<NewSmtpCredentials>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
