/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.api;

import com.elasticemail.client.ApiCallback;
import com.elasticemail.client.ApiClient;
import com.elasticemail.client.ApiException;
import com.elasticemail.client.ApiResponse;
import com.elasticemail.client.Configuration;
import com.elasticemail.client.Pair;
import com.elasticemail.client.ProgressRequestBody;
import com.elasticemail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.elasticemail.model.CompressionFormat;
import com.elasticemail.model.EventType;
import com.elasticemail.model.EventsOrderBy;
import com.elasticemail.model.ExportFileFormats;
import com.elasticemail.model.ExportLink;
import com.elasticemail.model.ExportStatus;
import org.threeten.bp.OffsetDateTime;
import com.elasticemail.model.RecipientEvent;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for eventsByTransactionidGet
     * @param transactionid ID number of transaction (required)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsByTransactionidGetCall(String transactionid, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/{transactionid}"
            .replaceAll("\\{" + "transactionid" + "\\}", localVarApiClient.escapeString(transactionid.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsByTransactionidGetValidateBeforeCall(String transactionid, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'transactionid' is set
        if (transactionid == null) {
            throw new ApiException("Missing the required parameter 'transactionid' when calling eventsByTransactionidGet(Async)");
        }
        

        okhttp3.Call localVarCall = eventsByTransactionidGetCall(transactionid, from, to, orderBy, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Load Email Events
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @param transactionid ID number of transaction (required)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return List&lt;RecipientEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RecipientEvent> eventsByTransactionidGet(String transactionid, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<RecipientEvent>> localVarResp = eventsByTransactionidGetWithHttpInfo(transactionid, from, to, orderBy, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Load Email Events
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @param transactionid ID number of transaction (required)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return ApiResponse&lt;List&lt;RecipientEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecipientEvent>> eventsByTransactionidGetWithHttpInfo(String transactionid, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = eventsByTransactionidGetValidateBeforeCall(transactionid, from, to, orderBy, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<RecipientEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load Email Events (asynchronously)
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     * @param transactionid ID number of transaction (required)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit Maximum number of returned items. (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsByTransactionidGetAsync(String transactionid, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback<List<RecipientEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsByTransactionidGetValidateBeforeCall(transactionid, from, to, orderBy, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<RecipientEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsChannelsByNameExportPost
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsChannelsByNameExportPostCall(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/channels/{name}/export"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (fileFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileFormat", fileFormat));
        }

        if (compressionFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compressionFormat", compressionFormat));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileName", fileName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsChannelsByNameExportPostValidateBeforeCall(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling eventsChannelsByNameExportPost(Async)");
        }
        

        okhttp3.Call localVarCall = eventsChannelsByNameExportPostCall(name, eventTypes, from, to, fileFormat, compressionFormat, fileName, _callback);
        return localVarCall;

    }

    /**
     * Export Channel Events
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @return ExportLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ExportLink eventsChannelsByNameExportPost(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName) throws ApiException {
        ApiResponse<ExportLink> localVarResp = eventsChannelsByNameExportPostWithHttpInfo(name, eventTypes, from, to, fileFormat, compressionFormat, fileName);
        return localVarResp.getData();
    }

    /**
     * Export Channel Events
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @return ApiResponse&lt;ExportLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportLink> eventsChannelsByNameExportPostWithHttpInfo(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName) throws ApiException {
        okhttp3.Call localVarCall = eventsChannelsByNameExportPostValidateBeforeCall(name, eventTypes, from, to, fileFormat, compressionFormat, fileName, null);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Channel Events (asynchronously)
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsChannelsByNameExportPostAsync(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName, final ApiCallback<ExportLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsChannelsByNameExportPostValidateBeforeCall(name, eventTypes, from, to, fileFormat, compressionFormat, fileName, _callback);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsChannelsByNameGet
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsChannelsByNameGetCall(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/channels/{name}"
            .replaceAll("\\{" + "name" + "\\}", localVarApiClient.escapeString(name.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsChannelsByNameGetValidateBeforeCall(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'name' is set
        if (name == null) {
            throw new ApiException("Missing the required parameter 'name' when calling eventsChannelsByNameGet(Async)");
        }
        

        okhttp3.Call localVarCall = eventsChannelsByNameGetCall(name, eventTypes, from, to, orderBy, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Load Channel Events
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return List&lt;RecipientEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RecipientEvent> eventsChannelsByNameGet(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<RecipientEvent>> localVarResp = eventsChannelsByNameGetWithHttpInfo(name, eventTypes, from, to, orderBy, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Load Channel Events
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return ApiResponse&lt;List&lt;RecipientEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecipientEvent>> eventsChannelsByNameGetWithHttpInfo(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = eventsChannelsByNameGetValidateBeforeCall(name, eventTypes, from, to, orderBy, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<RecipientEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load Channel Events (asynchronously)
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param name Name of selected channel. (required)
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsChannelsByNameGetAsync(String name, List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback<List<RecipientEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsChannelsByNameGetValidateBeforeCall(name, eventTypes, from, to, orderBy, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<RecipientEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsChannelsExportByIdStatusGet
     * @param id ID of the exported file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsChannelsExportByIdStatusGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/channels/export/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsChannelsExportByIdStatusGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsChannelsExportByIdStatusGet(Async)");
        }
        

        okhttp3.Call localVarCall = eventsChannelsExportByIdStatusGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Check Channel Export Status
     * Check the current status of the channel export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @return ExportStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExportStatus eventsChannelsExportByIdStatusGet(String id) throws ApiException {
        ApiResponse<ExportStatus> localVarResp = eventsChannelsExportByIdStatusGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Check Channel Export Status
     * Check the current status of the channel export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @return ApiResponse&lt;ExportStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportStatus> eventsChannelsExportByIdStatusGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = eventsChannelsExportByIdStatusGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExportStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Channel Export Status (asynchronously)
     * Check the current status of the channel export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsChannelsExportByIdStatusGetAsync(String id, final ApiCallback<ExportStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsChannelsExportByIdStatusGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExportStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsExportByIdStatusGet
     * @param id ID of the exported file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsExportByIdStatusGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/export/{id}/status"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsExportByIdStatusGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling eventsExportByIdStatusGet(Async)");
        }
        

        okhttp3.Call localVarCall = eventsExportByIdStatusGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Check Export Status
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @return ExportStatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ExportStatus eventsExportByIdStatusGet(String id) throws ApiException {
        ApiResponse<ExportStatus> localVarResp = eventsExportByIdStatusGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Check Export Status
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @return ApiResponse&lt;ExportStatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportStatus> eventsExportByIdStatusGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = eventsExportByIdStatusGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<ExportStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check Export Status (asynchronously)
     * Check the current status of the export. Required Access Level: Export
     * @param id ID of the exported file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsExportByIdStatusGetAsync(String id, final ApiCallback<ExportStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsExportByIdStatusGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<ExportStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsExportPost
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsExportPostCall(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events/export";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (fileFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileFormat", fileFormat));
        }

        if (compressionFormat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("compressionFormat", compressionFormat));
        }

        if (fileName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fileName", fileName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsExportPostValidateBeforeCall(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = eventsExportPostCall(eventTypes, from, to, fileFormat, compressionFormat, fileName, _callback);
        return localVarCall;

    }

    /**
     * Export Events
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @return ExportLink
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ExportLink eventsExportPost(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName) throws ApiException {
        ApiResponse<ExportLink> localVarResp = eventsExportPostWithHttpInfo(eventTypes, from, to, fileFormat, compressionFormat, fileName);
        return localVarResp.getData();
    }

    /**
     * Export Events
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @return ApiResponse&lt;ExportLink&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ExportLink> eventsExportPostWithHttpInfo(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName) throws ApiException {
        okhttp3.Call localVarCall = eventsExportPostValidateBeforeCall(eventTypes, from, to, fileFormat, compressionFormat, fileName, null);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Export Events (asynchronously)
     * Export delivery events log information to the specified file format. Required Access Level: Export
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param fileFormat Format of the exported file (optional, default to Csv)
     * @param compressionFormat FileResponse compression format. None or Zip. (optional, default to None)
     * @param fileName Name of your file including extension. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 202 </td><td> Accepted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsExportPostAsync(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, ExportFileFormats fileFormat, CompressionFormat compressionFormat, String fileName, final ApiCallback<ExportLink> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsExportPostValidateBeforeCall(eventTypes, from, to, fileFormat, compressionFormat, fileName, _callback);
        Type localVarReturnType = new TypeToken<ExportLink>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for eventsGet
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetCall(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (eventTypes != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "eventTypes", eventTypes));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderBy", orderBy));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call eventsGetValidateBeforeCall(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = eventsGetCall(eventTypes, from, to, orderBy, limit, offset, _callback);
        return localVarCall;

    }

    /**
     * Load Events
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return List&lt;RecipientEvent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<RecipientEvent> eventsGet(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset) throws ApiException {
        ApiResponse<List<RecipientEvent>> localVarResp = eventsGetWithHttpInfo(eventTypes, from, to, orderBy, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Load Events
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @return ApiResponse&lt;List&lt;RecipientEvent&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<RecipientEvent>> eventsGetWithHttpInfo(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset) throws ApiException {
        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(eventTypes, from, to, orderBy, limit, offset, null);
        Type localVarReturnType = new TypeToken<List<RecipientEvent>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Load Events (asynchronously)
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     * @param eventTypes Types of Events to return (optional)
     * @param from Starting date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param to Ending date for search in YYYY-MM-DDThh:mm:ss format. (optional)
     * @param orderBy  (optional, default to DateDescending)
     * @param limit How many items to load. Maximum for this request is 1000 items (optional)
     * @param offset How many items should be returned ahead. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call eventsGetAsync(List<EventType> eventTypes, OffsetDateTime from, OffsetDateTime to, EventsOrderBy orderBy, Integer limit, Integer offset, final ApiCallback<List<RecipientEvent>> _callback) throws ApiException {

        okhttp3.Call localVarCall = eventsGetValidateBeforeCall(eventTypes, from, to, orderBy, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<List<RecipientEvent>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
