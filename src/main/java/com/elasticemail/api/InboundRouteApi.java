/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://elasticemail.com/account#/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given request’s description.    This is the documentation for REST API. If you’d like to read our legacy documentation regarding Web API v2 click <a target=\"_blank\" href=\"https://api.elasticemail.com/public/help\">here</a>.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.api;

import com.elasticemail.client.ApiCallback;
import com.elasticemail.client.ApiClient;
import com.elasticemail.client.ApiException;
import com.elasticemail.client.ApiResponse;
import com.elasticemail.client.Configuration;
import com.elasticemail.client.Pair;
import com.elasticemail.client.ProgressRequestBody;
import com.elasticemail.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.elasticemail.model.InboundPayload;
import com.elasticemail.model.InboundRoute;
import com.elasticemail.model.SortOrderItem;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class InboundRouteApi {
    private ApiClient localVarApiClient;

    public InboundRouteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public InboundRouteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for inboundrouteByIdDelete
     * @param id  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteByIdDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboundroute/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inboundrouteByIdDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling inboundrouteByIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = inboundrouteByIdDeleteCall(id, _callback);
        return localVarCall;

    }

    /**
     * Delete Route
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @param id  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void inboundrouteByIdDelete(String id) throws ApiException {
        inboundrouteByIdDeleteWithHttpInfo(id);
    }

    /**
     * Delete Route
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @param id  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> inboundrouteByIdDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = inboundrouteByIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Route (asynchronously)
     * Deletes the Inbound Route. Required Access Level: ModifySettings
     * @param id  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteByIdDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = inboundrouteByIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for inboundrouteByIdGet
     * @param id ID number of your attachment (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteByIdGetCall(String id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboundroute/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inboundrouteByIdGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling inboundrouteByIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = inboundrouteByIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get Route
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @param id ID number of your attachment (required)
     * @return InboundRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InboundRoute inboundrouteByIdGet(String id) throws ApiException {
        ApiResponse<InboundRoute> localVarResp = inboundrouteByIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get Route
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @param id ID number of your attachment (required)
     * @return ApiResponse&lt;InboundRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundRoute> inboundrouteByIdGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = inboundrouteByIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<InboundRoute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Route (asynchronously)
     * Load an Inbound Route. Required Access Level: ViewSettings
     * @param id ID number of your attachment (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteByIdGetAsync(String id, final ApiCallback<InboundRoute> _callback) throws ApiException {

        okhttp3.Call localVarCall = inboundrouteByIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<InboundRoute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inboundrouteByIdPut
     * @param id  (required)
     * @param inboundPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteByIdPutCall(String id, InboundPayload inboundPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inboundPayload;

        // create path and map variables
        String localVarPath = "/inboundroute/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inboundrouteByIdPutValidateBeforeCall(String id, InboundPayload inboundPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling inboundrouteByIdPut(Async)");
        }
        
        // verify the required parameter 'inboundPayload' is set
        if (inboundPayload == null) {
            throw new ApiException("Missing the required parameter 'inboundPayload' when calling inboundrouteByIdPut(Async)");
        }
        

        okhttp3.Call localVarCall = inboundrouteByIdPutCall(id, inboundPayload, _callback);
        return localVarCall;

    }

    /**
     * Update Route
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @param id  (required)
     * @param inboundPayload  (required)
     * @return InboundRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InboundRoute inboundrouteByIdPut(String id, InboundPayload inboundPayload) throws ApiException {
        ApiResponse<InboundRoute> localVarResp = inboundrouteByIdPutWithHttpInfo(id, inboundPayload);
        return localVarResp.getData();
    }

    /**
     * Update Route
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @param id  (required)
     * @param inboundPayload  (required)
     * @return ApiResponse&lt;InboundRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundRoute> inboundrouteByIdPutWithHttpInfo(String id, InboundPayload inboundPayload) throws ApiException {
        okhttp3.Call localVarCall = inboundrouteByIdPutValidateBeforeCall(id, inboundPayload, null);
        Type localVarReturnType = new TypeToken<InboundRoute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Route (asynchronously)
     * Update the Inbound Route. Required Access Level: ModifySettings
     * @param id  (required)
     * @param inboundPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteByIdPutAsync(String id, InboundPayload inboundPayload, final ApiCallback<InboundRoute> _callback) throws ApiException {

        okhttp3.Call localVarCall = inboundrouteByIdPutValidateBeforeCall(id, inboundPayload, _callback);
        Type localVarReturnType = new TypeToken<InboundRoute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inboundrouteGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteGetCall(final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/inboundroute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inboundrouteGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = inboundrouteGetCall(_callback);
        return localVarCall;

    }

    /**
     * Get Routes
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @return List&lt;InboundRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<InboundRoute> inboundrouteGet() throws ApiException {
        ApiResponse<List<InboundRoute>> localVarResp = inboundrouteGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get Routes
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @return ApiResponse&lt;List&lt;InboundRoute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InboundRoute>> inboundrouteGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = inboundrouteGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<InboundRoute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Routes (asynchronously)
     * Get all your Inbound Routes. Required Access Level: ViewSettings
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteGetAsync(final ApiCallback<List<InboundRoute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = inboundrouteGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<InboundRoute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inboundrouteOrderPut
     * @param sortOrderItem Change the ordering of inbound routes for when matching the inbound (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteOrderPutCall(List<SortOrderItem> sortOrderItem, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = sortOrderItem;

        // create path and map variables
        String localVarPath = "/inboundroute/order";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inboundrouteOrderPutValidateBeforeCall(List<SortOrderItem> sortOrderItem, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'sortOrderItem' is set
        if (sortOrderItem == null) {
            throw new ApiException("Missing the required parameter 'sortOrderItem' when calling inboundrouteOrderPut(Async)");
        }
        

        okhttp3.Call localVarCall = inboundrouteOrderPutCall(sortOrderItem, _callback);
        return localVarCall;

    }

    /**
     * Update Sorting
     * Required Access Level: ViewSettings
     * @param sortOrderItem Change the ordering of inbound routes for when matching the inbound (required)
     * @return List&lt;InboundRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<InboundRoute> inboundrouteOrderPut(List<SortOrderItem> sortOrderItem) throws ApiException {
        ApiResponse<List<InboundRoute>> localVarResp = inboundrouteOrderPutWithHttpInfo(sortOrderItem);
        return localVarResp.getData();
    }

    /**
     * Update Sorting
     * Required Access Level: ViewSettings
     * @param sortOrderItem Change the ordering of inbound routes for when matching the inbound (required)
     * @return ApiResponse&lt;List&lt;InboundRoute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<InboundRoute>> inboundrouteOrderPutWithHttpInfo(List<SortOrderItem> sortOrderItem) throws ApiException {
        okhttp3.Call localVarCall = inboundrouteOrderPutValidateBeforeCall(sortOrderItem, null);
        Type localVarReturnType = new TypeToken<List<InboundRoute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Sorting (asynchronously)
     * Required Access Level: ViewSettings
     * @param sortOrderItem Change the ordering of inbound routes for when matching the inbound (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundrouteOrderPutAsync(List<SortOrderItem> sortOrderItem, final ApiCallback<List<InboundRoute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = inboundrouteOrderPutValidateBeforeCall(sortOrderItem, _callback);
        Type localVarReturnType = new TypeToken<List<InboundRoute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for inboundroutePost
     * @param inboundPayload  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundroutePostCall(InboundPayload inboundPayload, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = inboundPayload;

        // create path and map variables
        String localVarPath = "/inboundroute";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apikey" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call inboundroutePostValidateBeforeCall(InboundPayload inboundPayload, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'inboundPayload' is set
        if (inboundPayload == null) {
            throw new ApiException("Missing the required parameter 'inboundPayload' when calling inboundroutePost(Async)");
        }
        

        okhttp3.Call localVarCall = inboundroutePostCall(inboundPayload, _callback);
        return localVarCall;

    }

    /**
     * Create Route
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @param inboundPayload  (required)
     * @return InboundRoute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public InboundRoute inboundroutePost(InboundPayload inboundPayload) throws ApiException {
        ApiResponse<InboundRoute> localVarResp = inboundroutePostWithHttpInfo(inboundPayload);
        return localVarResp.getData();
    }

    /**
     * Create Route
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @param inboundPayload  (required)
     * @return ApiResponse&lt;InboundRoute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InboundRoute> inboundroutePostWithHttpInfo(InboundPayload inboundPayload) throws ApiException {
        okhttp3.Call localVarCall = inboundroutePostValidateBeforeCall(inboundPayload, null);
        Type localVarReturnType = new TypeToken<InboundRoute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Route (asynchronously)
     * Create new Inbound Route. Required Access Level: ModifySettings
     * @param inboundPayload  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call inboundroutePostAsync(InboundPayload inboundPayload, final ApiCallback<InboundRoute> _callback) throws ApiException {

        okhttp3.Call localVarCall = inboundroutePostValidateBeforeCall(inboundPayload, _callback);
        Type localVarReturnType = new TypeToken<InboundRoute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
