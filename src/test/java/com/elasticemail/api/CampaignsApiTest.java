/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.api;

import com.elasticemail.client.ApiException;
import com.elasticemail.model.Campaign;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CampaignsApi
 */
@Disabled
public class CampaignsApiTest {

    private final CampaignsApi api = new CampaignsApi();

    /**
     * Delete Campaign
     *
     * Delete the specific campaign.  This does not cancel in progress email, see Cancel In Progress. Required Access Level: ModifyCampaigns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void campaignsByNameDeleteTest() throws ApiException {
        String name = null;
        api.campaignsByNameDelete(name);
        // TODO: test validations
    }

    /**
     * Load Campaign
     *
     * Returns the specified campaign details. Required Access Level: ViewCampaigns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void campaignsByNameGetTest() throws ApiException {
        String name = null;
        Campaign response = api.campaignsByNameGet(name);
        // TODO: test validations
    }

    /**
     * Pause Campaign
     *
     * Pauses the specific campaign, cancelling emails that are waiting to be sent. Required Access Level: ModifyCampaigns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void campaignsByNamePausePutTest() throws ApiException {
        String name = null;
        api.campaignsByNamePausePut(name);
        // TODO: test validations
    }

    /**
     * Update Campaign
     *
     * Updates a previously added campaign.  Only Active and Paused campaigns can be updated. Required Access Level: ModifyCampaigns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void campaignsByNamePutTest() throws ApiException {
        String name = null;
        Campaign campaign = null;
        Campaign response = api.campaignsByNamePut(name, campaign);
        // TODO: test validations
    }

    /**
     * Load Campaigns
     *
     * Returns a list all of your campaigns. Limited to 1000 results. Required Access Level: ViewCampaigns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void campaignsGetTest() throws ApiException {
        String search = null;
        Integer offset = null;
        Integer limit = null;
        List<Campaign> response = api.campaignsGet(search, offset, limit);
        // TODO: test validations
    }

    /**
     * Add Campaign
     *
     * Add a campaign for processing. Required Access Level: ModifyCampaigns
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void campaignsPostTest() throws ApiException {
        Campaign campaign = null;
        Campaign response = api.campaignsPost(campaign);
        // TODO: test validations
    }

}
