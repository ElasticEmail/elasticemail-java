/*
 * Elastic Email REST API
 * This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.    Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.    The API has a limit of 20 concurrent connections and a hard timeout of 600 seconds per request.    To start using this API, you will need your Access Token (available <a target=\"_blank\" href=\"https://app.elasticemail.com/marketing/settings/new/manage-api\">here</a>). Remember to keep it safe. Required access levels are listed in the given requestâ€™s description.    Downloadable library clients can be found in our Github repository <a target=\"_blank\" href=\"https://github.com/ElasticEmail?tab=repositories&q=%22rest+api%22+in%3Areadme\">here</a>
 *
 * The version of the OpenAPI document: 4.0.0
 * Contact: support@elasticemail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.elasticemail.api;

import com.elasticemail.client.ApiException;
import com.elasticemail.model.CompressionFormat;
import com.elasticemail.model.EventType;
import com.elasticemail.model.EventsOrderBy;
import com.elasticemail.model.ExportFileFormats;
import com.elasticemail.model.ExportLink;
import com.elasticemail.model.ExportStatus;
import java.time.OffsetDateTime;
import com.elasticemail.model.RecipientEvent;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EventsApi
 */
@Disabled
public class EventsApiTest {

    private final EventsApi api = new EventsApi();

    /**
     * Load Email Events
     *
     * Returns a log of delivery events for the specific transaction ID. Required Access Level: ViewReports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsByTransactionidGetTest() throws ApiException {
        String transactionid = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        EventsOrderBy orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<RecipientEvent> response = api.eventsByTransactionidGet(transactionid, from, to, orderBy, limit, offset);
        // TODO: test validations
    }

    /**
     * Export Channel Events
     *
     * Export delivery events log information to the specified file format. Required Access Level: Export
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsChannelsByNameExportPostTest() throws ApiException {
        String name = null;
        List<EventType> eventTypes = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        ExportFileFormats fileFormat = null;
        CompressionFormat compressionFormat = null;
        String fileName = null;
        ExportLink response = api.eventsChannelsByNameExportPost(name, eventTypes, from, to, fileFormat, compressionFormat, fileName);
        // TODO: test validations
    }

    /**
     * Load Channel Events
     *
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsChannelsByNameGetTest() throws ApiException {
        String name = null;
        List<EventType> eventTypes = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        EventsOrderBy orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<RecipientEvent> response = api.eventsChannelsByNameGet(name, eventTypes, from, to, orderBy, limit, offset);
        // TODO: test validations
    }

    /**
     * Check Channel Export Status
     *
     * Check the current status of the channel export. Required Access Level: Export
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsChannelsExportByIdStatusGetTest() throws ApiException {
        String id = null;
        ExportStatus response = api.eventsChannelsExportByIdStatusGet(id);
        // TODO: test validations
    }

    /**
     * Check Export Status
     *
     * Check the current status of the export. Required Access Level: Export
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsExportByIdStatusGetTest() throws ApiException {
        String id = null;
        ExportStatus response = api.eventsExportByIdStatusGet(id);
        // TODO: test validations
    }

    /**
     * Export Events
     *
     * Export delivery events log information to the specified file format. Required Access Level: Export
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsExportPostTest() throws ApiException {
        List<EventType> eventTypes = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        ExportFileFormats fileFormat = null;
        CompressionFormat compressionFormat = null;
        String fileName = null;
        ExportLink response = api.eventsExportPost(eventTypes, from, to, fileFormat, compressionFormat, fileName);
        // TODO: test validations
    }

    /**
     * Load Events
     *
     * Returns a log of delivery events filtered by specified parameters. Required Access Level: ViewReports
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void eventsGetTest() throws ApiException {
        List<EventType> eventTypes = null;
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        EventsOrderBy orderBy = null;
        Integer limit = null;
        Integer offset = null;
        List<RecipientEvent> response = api.eventsGet(eventTypes, from, to, orderBy, limit, offset);
        // TODO: test validations
    }

}
